------------------------------------------------------------------------------
--                                                                          --
--                            Matreshka Project                             --
--                                                                          --
--                              XML Processor                               --
--                                                                          --
--                              Tools Component                             --
--                                                                          --
------------------------------------------------------------------------------
--                                                                          --
-- Copyright Â© 2010, Vadim Godunko <vgodunko@gmail.com>                      --
-- All rights reserved.                                                     --
--                                                                          --
-- Redistribution and use in source and binary forms, with or without       --
-- modification, are permitted provided that the following conditions       --
-- are met:                                                                 --
--                                                                          --
--  * Redistributions of source code must retain the above copyright        --
--    notice, this list of conditions and the following disclaimer.         --
--                                                                          --
--  * Redistributions in binary form must reproduce the above copyright     --
--    notice, this list of conditions and the following disclaimer in the   --
--    documentation and/or other materials provided with the distribution.  --
--                                                                          --
--  * Neither the name of the Vadim Godunko, IE nor the names of its        --
--    contributors may be used to endorse or promote products derived from  --
--    this software without specific prior written permission.              --
--                                                                          --
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS      --
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT        --
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    --
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     --
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   --
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED --
-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   --
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   --
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     --
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       --
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             --
--                                                                          --
------------------------------------------------------------------------------
--  $Revision$ $Date$
------------------------------------------------------------------------------

private package Matreshka.SAX.Simple_Readers.Parser.Tables is

   pragma Preelaborate;

   type Goto_Entry is record
      Nonterm  : Integer;
      Newstate : Integer;
   end record;

   type Shift_Reduce_Entry is record
      T   : Integer;
      Act : Integer;
   end record;

   YY_Default           : constant :=    -1;
   YY_First_Shift_Entry : constant :=     0;
   YY_Accept_Code       : constant := -3001;
   YY_Error_Code        : constant := -3000;

   YY_Goto_Matrix : constant array (-1 .. 129) of Goto_Entry :=
    ((   -1,    -1), (   -7,     2), (   -3,     1), (   -2,     4),
     (  -13,     8), (  -12,     6), (   -4,     5), (  -13,     8),
     (  -12,    14), (   -5,    13), (  -19,    20), (  -14,    19),
     (   -6,    22), (  -15,    26), (  -25,    31), (  -24,    30),
     (  -23,    29), (  -22,    28), (  -21,    27), (  -16,    36),
     (  -46,    38), (  -42,    37), (  -13,     8), (  -12,     6),
     (   -4,    40), (   -8,    42), (  -25,    31), (  -24,    30),
     (  -23,    29), (  -22,    28), (  -21,    27), (  -16,    44),
     (  -25,    31), (  -24,    30), (  -23,    29), (  -22,    45),
     (  -32,    54), (  -31,    53), (  -30,    51), (  -29,    50),
     (  -28,    55), (  -38,    57), (  -37,    56), (  -17,    60),
     (  -46,    63), (  -13,     8), (  -12,    14), (   -9,    67),
     (  -17,    68), (  -26,    70), (  -14,    71), (  -35,    76),
     (  -33,    77), (  -32,    75), (  -31,    74), (  -38,    88),
     (  -25,    31), (  -24,    30), (  -23,    29), (  -22,    28),
     (  -21,    99), (  -43,   101), (  -41,   103), (  -27,   108),
     (  -26,   113), (  -14,   114), (  -34,   126), (  -35,    76),
     (  -33,    77), (  -32,    75), (  -31,    74), (  -36,   128),
     (  -41,   133), (  -39,   135), (  -41,   133), (  -39,   136),
     (  -41,   133), (  -39,   137), (  -41,   133), (  -39,   138),
     (  -41,   133), (  -39,   139), (  -41,   133), (  -39,   140),
     (  -41,   133), (  -39,   141), (  -41,   133), (  -39,   142),
     (  -25,    31), (  -24,    30), (  -23,    29), (  -22,    45),
     (  -20,   146), (  -45,   148), (  -44,   147), (  -13,   152),
     (  -10,   153), (   -6,   149), (  -27,   155), (  -18,   157),
     (  -33,   163), (  -32,    75), (  -31,    74), (  -33,   166),
     (  -32,    75), (  -31,    74), (  -41,   170), (  -40,   172),
     (  -13,     8), (  -12,     6), (   -4,   174), (  -45,   176),
     (  -13,   152), (  -10,   153), (   -6,   149), (  -11,   178),
     (  -13,     8), (  -12,     6), (   -4,   180), (  -33,   182),
     (  -32,    75), (  -31,    74), (  -40,   185), (  -13,     8),
     (  -12,    14), (  -13,     8), (  -12,    14), (  -41,   133),
     (  -39,   193), (  -41,   133), (  -39,   197));

   YY_Goto_Offset : constant array (0 .. 199) of Integer :=
    (    0,    3,    6,    6,    6,    6,    9,    9,
         9,    9,    9,    9,    9,   11,   12,   12,
        12,   12,   12,   12,   13,   19,   21,   24,
        25,   25,   25,   31,   35,   35,   35,   35,
        35,   35,   35,   40,   42,   43,   44,   44,
        44,   46,   46,   47,   47,   48,   48,   50,
        50,   50,   50,   50,   50,   54,   54,   54,
        54,   55,   55,   55,   60,   60,   61,   61,
        61,   62,   62,   62,   62,   62,   63,   63,
        63,   65,   65,   65,   65,   65,   66,   70,
        71,   71,   71,   71,   71,   71,   71,   71,
        71,   71,   73,   75,   77,   79,   81,   83,
        85,   87,   87,   87,   91,   92,   97,   98,
        98,   98,   98,   98,   99,   99,   99,   99,
        99,   99,   99,   99,   99,   99,   99,   99,
        99,   99,   99,   99,   99,   99,  102,  102,
       105,  105,  105,  105,  105,  105,  105,  106,
       106,  106,  106,  106,  106,  106,  106,  106,
       106,  107,  107,  110,  114,  114,  114,  114,
       114,  114,  114,  115,  115,  115,  118,  118,
       118,  118,  118,  118,  118,  118,  121,  121,
       121,  121,  121,  121,  122,  122,  122,  124,
       124,  124,  124,  124,  124,  126,  126,  126,
       126,  126,  126,  128,  128,  128,  128,  128,
       128,  130,  130,  130,  130,  130,  130,  130);

   YY_Rule_Length : constant array (0 .. 118) of Integer :=
    (    2,    5,    1,    0,    7,    6,    3,    0,
         3,    0,    3,    0,    2,    1,    0,    1,
         1,    2,    0,    0,    8,    0,    0,    7,
         0,    2,    3,    1,    3,    0,    2,    1,
         0,    1,    1,    1,    1,    4,    4,    6,
         5,    5,    3,    2,    1,    0,    3,    1,
         1,    1,    1,    2,    2,    2,    1,    2,
         2,    2,    1,    4,    3,    3,    2,    3,
         1,    2,    2,    2,    1,    2,    2,    2,
         1,    2,    2,    2,    1,    5,    3,    3,
         2,    0,    3,    2,    1,    0,    3,    3,
         3,    3,    3,    3,    3,    3,    7,    6,
         3,    2,    0,    1,    1,    1,    2,    0,
         7,    3,    2,    1,    0,    1,    1,    1,
         1,    1,    2,    1,    0,    3,    3);

   YY_Get_LHS_Rule : constant array (0 .. 118) of Integer :=
    (   -1,   -2,   -3,   -3,   -7,  -10,  -11,  -11,
        -8,   -8,   -9,   -9,   -4,   -4,   -4,  -12,
       -12,  -13,  -15,  -18,   -5,  -19,  -20,   -5,
        -5,  -14,  -14,  -16,  -17,  -17,  -21,  -21,
       -21,  -22,  -22,  -22,  -22,  -23,  -23,  -23,
       -23,  -23,  -26,  -27,  -27,  -27,  -24,  -28,
       -28,  -28,  -28,  -30,  -30,  -30,  -30,  -30,
       -30,  -30,  -30,  -31,  -32,  -34,  -34,  -35,
       -35,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
       -33,  -33,  -33,  -33,  -33,  -29,  -29,  -36,
       -36,  -36,  -25,  -37,  -37,  -37,  -38,  -38,
       -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
       -40,  -40,  -40,  -39,  -39,  -39,  -39,  -43,
        -6,   -6,  -44,  -44,  -44,  -45,  -45,  -45,
       -45,  -45,  -42,  -42,  -42,  -46,  -41);

   YY_Shift_Reduce_Matrix : constant array (-1 .. 414) of Shift_Reduce_Entry :=
    ((   -1,    -1), (    2,     3), (   -1,    -3), (    3,     9),
     (   22,     7), (   -1,   -14), (   -1,    -2), (   27,    10),
     (   -1, -3000), (    0, -3001), (   -1, -3000), (    3,     9),
     (    6,    12), (   22,     7), (   -1,   -24), (   -1,   -13),
     (   -1,   -15), (   -1,   -16), (    4,    15), (   -1, -3000),
     (   24,    16), (   -1, -3000), (   -1, -3000), (   11,    17),
     (   12,    18), (   -1,   -21), (   23,    21), (   -1, -3000),
     (   -1,   -12), (   -1,   -17), (   20,    23), (   -1, -3000),
     (   13,    24), (   -1, -3000), (   14,    25), (   -1, -3000),
     (   -1,   -18), (    7,    33), (    8,    34), (   22,    32),
     (   40,    35), (   -1,   -32), (   10,    39), (   -1,  -116),
     (    3,     9), (   22,     7), (   -1,   -14), (   28,    41),
     (   -1,    -9), (   -1,   -25), (   13,    43), (   -1, -3000),
     (    7,    33), (    8,    34), (   22,    32), (   40,    35),
     (   -1,   -32), (    7,    33), (    8,    34), (   22,    32),
     (   40,    35), (   -1,   -27), (   -1,   -31), (   -1,   -33),
     (   -1,   -34), (   -1,   -35), (   -1,   -36), (   10,    46),
     (   17,    47), (   -1, -3000), (   30,    48), (   31,    49),
     (   32,    52), (   -1, -3000), (   10,    58), (   -1,   -85),
     (   15,    59), (   -1,   -29), (    9,    61), (   10,    39),
     (   26,    62), (   -1, -3000), (   -1,  -115), (   24,    64),
     (   -1, -3000), (    3,     9), (   22,     7), (   -1,    -1),
     (   24,    65), (   -1, -3000), (   29,    66), (   -1,   -11),
     (   -1,   -26), (   15,    59), (   -1,   -29), (   -1,   -30),
     (   11,    17), (   12,    18), (   18,    69), (   -1, -3000),
     (   10,    72), (   -1, -3000), (   -1,   -47), (   -1,   -48),
     (   -1,   -49), (   -1,   -50), (   10,    73), (   32,    78),
     (   39,    79), (   -1, -3000), (   36,    80), (   37,    81),
     (   38,    82), (   -1,   -54), (   36,    83), (   37,    84),
     (   38,    85), (   -1,   -58), (    9,    86), (   -1, -3000),
     (    9,    87), (   10,    58), (   -1, -3000), (   -1,   -84),
     (   32,    98), (   41,    89), (   42,    90), (   43,    91),
     (   44,    92), (   45,    93), (   46,    94), (   47,    95),
     (   48,    96), (   49,    97), (   -1, -3000), (    7,    33),
     (    8,    34), (   22,    32), (   40,    35), (   -1,   -32),
     (    9,   100), (   -1, -3000), (   -1,  -103), (   -1,  -105),
     (   -1,  -114), (   18,   102), (   -1, -3000), (   20,   104),
     (   -1, -3000), (   24,   105), (   -1, -3000), (    4,   106),
     (   -1, -3000), (    9,   107), (   -1, -3000), (   20,   109),
     (   -1,   -45), (    9,   110), (   -1, -3000), (    9,   111),
     (   21,   112), (   -1, -3000), (   11,    17), (   12,    18),
     (   18,    69), (   -1, -3000), (   36,   115), (   37,   116),
     (   38,   117), (   -1,   -68), (   36,   118), (   37,   119),
     (   38,   120), (   -1,   -72), (   36,   121), (   37,   122),
     (   38,   123), (   -1,   -76), (   33,   124), (   35,   125),
     (   -1, -3000), (   34,   127), (   -1,   -64), (   10,    73),
     (   32,    78), (   -1, -3000), (   33,   130), (   34,   129),
     (   -1, -3000), (   -1,   -51), (   -1,   -52), (   -1,   -53),
     (   -1,   -55), (   -1,   -56), (   -1,   -57), (   -1,   -46),
     (   -1,   -82), (   -1,   -83), (   18,   102), (   50,   131),
     (   51,   132), (   52,   134), (   -1, -3000), (   18,   102),
     (   50,   131), (   51,   132), (   52,   134), (   -1, -3000),
     (   18,   102), (   50,   131), (   51,   132), (   52,   134),
     (   -1, -3000), (   18,   102), (   50,   131), (   51,   132),
     (   52,   134), (   -1, -3000), (   18,   102), (   50,   131),
     (   51,   132), (   52,   134), (   -1, -3000), (   18,   102),
     (   50,   131), (   51,   132), (   52,   134), (   -1, -3000),
     (   18,   102), (   50,   131), (   51,   132), (   52,   134),
     (   -1, -3000), (   18,   102), (   50,   131), (   51,   132),
     (   52,   134), (   -1, -3000), (   32,   143), (   -1, -3000),
     (   10,   144), (   -1, -3000), (    7,    33), (    8,    34),
     (   16,   145), (   22,    32), (   40,    35), (   -1, -3000),
     (   -1,   -22), (    2,   154), (    3,     9), (   20,   150),
     (   22,   151), (   23,    21), (   -1,  -108), (   20,   109),
     (   -1,   -45), (   -1,  -117), (   -1,    -8), (   20,   156),
     (   -1, -3000), (   -1,    -4), (   -1,   -19), (   19,   158),
     (   20,   159), (   -1, -3000), (   -1,   -44), (   -1,   -37),
     (   -1,   -38), (   10,   160), (   -1, -3000), (    9,   161),
     (   -1, -3000), (    9,   162), (   -1, -3000), (   -1,   -65),
     (   -1,   -66), (   -1,   -67), (   -1,   -69), (   -1,   -70),
     (   -1,   -71), (   -1,   -73), (   -1,   -74), (   -1,   -75),
     (   -1,   -60), (   10,    73), (   32,    78), (   -1, -3000),
     (   33,   164), (   34,   165), (   -1, -3000), (   10,    73),
     (   32,    78), (   -1, -3000), (   33,   167), (   34,   168),
     (   -1, -3000), (   10,   169), (   -1, -3000), (   -1,   -78),
     (   -1,   -99), (   -1,  -100), (   -1,  -101), (   18,   102),
     (   -1, -3000), (   -1,   -86), (   -1,   -87), (   -1,   -88),
     (   -1,   -89), (   -1,   -90), (   -1,   -91), (   -1,   -92),
     (   -1,   -93), (   10,   171), (   -1, -3000), (   34,   173),
     (   -1,   -98), (   -1,   -28), (    3,     9), (   22,     7),
     (   -1,   -14), (    2,   154), (    3,     9), (   20,   150),
     (   22,   151), (   23,    21), (   25,   175), (   -1, -3000),
     (   -1,  -107), (   -1,  -109), (   -1,  -110), (   -1,  -111),
     (   -1,  -112), (   -1,  -113), (   27,   177), (   -1,    -7),
     (   19,   179), (   20,   159), (   -1, -3000), (   -1,   -10),
     (    3,     9), (   22,     7), (   -1,   -14), (   -1,   -42),
     (   -1,   -43), (    9,   181), (   -1, -3000), (   -1,   -40),
     (   -1,   -41), (   -1,   -63), (   -1,   -59), (   10,    73),
     (   32,    78), (   -1, -3000), (   -1,   -62), (   37,   183),
     (   -1, -3000), (   10,   184), (   -1, -3000), (   -1,   -80),
     (   -1,  -102), (   34,   173), (   -1,   -98), (   33,   186),
     (   34,   187), (   -1, -3000), (   10,   188), (   -1, -3000),
     (    3,     9), (   22,     7), (   -1,   -23), (    9,   189),
     (   -1, -3000), (   -1,  -106), (   24,   190), (   -1, -3000),
     (   28,   191), (   -1, -3000), (   -1,  -118), (    3,     9),
     (   22,     7), (   -1,   -20), (   -1,   -39), (   -1,   -61),
     (   -1,   -77), (   -1,   -79), (   33,   192), (   34,   187),
     (   -1, -3000), (   18,   102), (   50,   131), (   51,   132),
     (   52,   134), (   -1, -3000), (   10,   194), (   -1, -3000),
     (   -1,   -97), (   -1,  -104), (   20,   195), (   -1, -3000),
     (   24,   196), (   -1, -3000), (   18,   102), (   50,   131),
     (   51,   132), (   52,   134), (   -1, -3000), (   -1,   -95),
     (   -1,   -96), (   -1,    -6), (   20,   198), (   -1, -3000),
     (   -1,   -94), (    4,   199), (   -1, -3000), (   -1,    -5));

   YY_Shift_Reduce_Offset : constant array (0 .. 199) of Integer :=
    (    0,    2,    5,    6,    8,   10,   14,   15,
        16,   17,   19,   21,   22,   25,   27,   28,
        29,   31,   33,   35,   36,   41,   43,   46,
        48,   49,   51,   56,   61,   62,   63,   64,
        65,   66,   69,   73,   75,   77,   81,   82,
        84,   87,   89,   91,   92,   94,   95,   99,
       101,  102,  103,  104,  105,  109,  113,  117,
       119,  122,  123,  134,  139,  141,  142,  143,
       144,  146,  148,  150,  152,  154,  156,  158,
       161,  165,  169,  173,  177,  180,  182,  185,
       188,  189,  190,  191,  192,  193,  194,  195,
       196,  197,  202,  207,  212,  217,  222,  227,
       232,  237,  239,  241,  247,  248,  254,  256,
       257,  258,  260,  261,  262,  265,  266,  267,
       268,  270,  272,  274,  275,  276,  277,  278,
       279,  280,  281,  282,  283,  284,  287,  290,
       293,  296,  298,  299,  300,  301,  302,  304,
       305,  306,  307,  308,  309,  310,  311,  312,
       314,  316,  317,  320,  327,  328,  329,  330,
       331,  332,  333,  335,  338,  339,  342,  343,
       344,  346,  347,  348,  349,  350,  353,  354,
       356,  358,  359,  360,  362,  365,  367,  370,
       372,  373,  375,  377,  378,  381,  382,  383,
       384,  385,  388,  393,  395,  396,  397,  399,
       401,  406,  407,  408,  409,  411,  412,  414);

end Matreshka.SAX.Simple_Readers.Parser.Tables;

------------------------------------------------------------------------------
--                                                                          --
--                            Matreshka Project                             --
--                                                                          --
--                              XML Processor                               --
--                                                                          --
--                              Tools Component                             --
--                                                                          --
------------------------------------------------------------------------------
--                                                                          --
-- Copyright Â© 2010, Vadim Godunko <vgodunko@gmail.com>                      --
-- All rights reserved.                                                     --
--                                                                          --
-- Redistribution and use in source and binary forms, with or without       --
-- modification, are permitted provided that the following conditions       --
-- are met:                                                                 --
--                                                                          --
--  * Redistributions of source code must retain the above copyright        --
--    notice, this list of conditions and the following disclaimer.         --
--                                                                          --
--  * Redistributions in binary form must reproduce the above copyright     --
--    notice, this list of conditions and the following disclaimer in the   --
--    documentation and/or other materials provided with the distribution.  --
--                                                                          --
--  * Neither the name of the Vadim Godunko, IE nor the names of its        --
--    contributors may be used to endorse or promote products derived from  --
--    this software without specific prior written permission.              --
--                                                                          --
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS      --
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT        --
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    --
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     --
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   --
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED --
-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   --
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   --
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     --
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       --
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             --
--                                                                          --
------------------------------------------------------------------------------
--  $Revision$ $Date$
------------------------------------------------------------------------------

private package Matreshka.SAX.Simple_Readers.Parser.Tables is

   pragma Preelaborate;

   type Goto_Entry is record
      Nonterm  : Integer;
      Newstate : Integer;
   end record;

   type Shift_Reduce_Entry is record
      T   : Integer;
      Act : Integer;
   end record;

   YY_Default           : constant :=    -1;
   YY_First_Shift_Entry : constant :=     0;
   YY_Accept_Code       : constant := -3001;
   YY_Error_Code        : constant := -3000;

   YY_Goto_Matrix : constant array (-1 .. 88) of Goto_Entry :=
    ((   -1,    -1), (   -7,     2), (   -3,     1), (   -2,     4),
     (  -13,     8), (  -12,     6), (   -4,     5), (  -13,     8),
     (  -12,    14), (   -5,    13), (  -19,    17), (  -14,    20),
     (   -6,    22), (  -15,    26), (  -41,    28), (  -37,    27),
     (  -13,     8), (  -12,     6), (   -4,    30), (   -8,    32),
     (  -23,    37), (  -22,    36), (  -21,    35), (  -20,    34),
     (  -16,    41), (  -41,    44), (  -13,     8), (  -12,    14),
     (   -9,    48), (  -23,    37), (  -22,    36), (  -21,    49),
     (  -32,    58), (  -31,    57), (  -30,    55), (  -29,    54),
     (  -28,    59), (  -17,    61), (  -38,    62), (  -42,    64),
     (  -26,    68), (  -24,    71), (  -19,    69), (  -35,    76),
     (  -33,    77), (  -32,    75), (  -31,    74), (  -23,    37),
     (  -22,    36), (  -21,    35), (  -20,    87), (  -40,    90),
     (  -39,    89), (  -13,    94), (  -10,    95), (   -6,    91),
     (  -27,    97), (  -27,   101), (  -26,   103), (  -25,   105),
     (  -19,   104), (  -34,   117), (  -33,   118), (  -32,    75),
     (  -31,    74), (  -35,    76), (  -33,    77), (  -32,    75),
     (  -31,    74), (  -36,   119), (  -23,    37), (  -22,    36),
     (  -21,    49), (  -18,   123), (  -40,   125), (  -13,    94),
     (  -10,    95), (   -6,    91), (  -11,   127), (  -33,   133),
     (  -32,    75), (  -31,    74), (  -13,     8), (  -12,     6),
     (   -4,   138), (  -33,   142), (  -32,    75), (  -31,    74),
     (  -13,     8), (  -12,    14));

   YY_Goto_Offset : constant array (0 .. 147) of Integer :=
    (    0,    3,    6,    6,    6,    6,    9,    9,
         9,    9,    9,    9,    9,   11,   12,   12,
        12,   12,   12,   12,   12,   13,   15,   18,
        19,   19,   19,   24,   25,   25,   25,   27,
        27,   28,   28,   31,   31,   31,   31,   31,
        31,   36,   37,   38,   38,   38,   39,   39,
        39,   39,   39,   42,   42,   42,   42,   42,
        42,   46,   46,   46,   46,   50,   50,   55,
        56,   56,   56,   56,   56,   56,   56,   57,
        57,   60,   60,   60,   60,   60,   64,   68,
        69,   69,   69,   69,   69,   69,   69,   69,
        72,   73,   77,   77,   77,   77,   77,   77,
        77,   78,   78,   78,   78,   78,   78,   78,
        78,   78,   78,   78,   78,   78,   78,   78,
        78,   78,   78,   78,   78,   81,   81,   81,
        81,   81,   81,   81,   84,   84,   84,   84,
        84,   84,   84,   84,   84,   84,   84,   84,
        87,   87,   87,   89,   89,   89,   89,   89,
        89,   89,   89,   89);

   YY_Rule_Length : constant array (0 .. 97) of Integer :=
    (    2,    5,    1,    0,    7,    6,    3,    0,
         3,    0,    3,    0,    2,    1,    0,    1,
         1,    2,    0,    0,    8,    0,    1,    0,
         2,    3,    1,    3,    0,    2,    1,    0,
         1,    1,    1,    4,    5,    1,    1,    3,
         1,    1,    3,    2,    1,    0,    3,    1,
         1,    1,    1,    2,    2,    2,    1,    2,
         2,    2,    1,    4,    3,    3,    1,    3,
         1,    2,    2,    2,    1,    2,    2,    2,
         1,    2,    2,    2,    1,    5,    3,    2,
         1,    0,    0,    7,    3,    2,    1,    0,
         1,    1,    1,    1,    1,    2,    1,    0,
         3,    3);

   YY_Get_LHS_Rule : constant array (0 .. 97) of Integer :=
    (   -1,   -2,   -3,   -3,   -7,  -10,  -11,  -11,
        -8,   -8,   -9,   -9,   -4,   -4,   -4,  -12,
       -12,  -13,  -15,  -18,   -5,   -5,  -14,  -14,
       -19,  -19,  -16,  -17,  -17,  -20,  -20,  -20,
       -21,  -21,  -21,  -22,  -22,  -24,  -24,  -24,
       -25,  -25,  -26,  -27,  -27,  -27,  -23,  -28,
       -28,  -28,  -28,  -30,  -30,  -30,  -30,  -30,
       -30,  -30,  -30,  -31,  -32,  -34,  -34,  -35,
       -35,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
       -33,  -33,  -33,  -33,  -33,  -29,  -29,  -36,
       -36,  -36,  -38,   -6,   -6,  -39,  -39,  -39,
       -40,  -40,  -40,  -40,  -40,  -37,  -37,  -37,
       -41,  -42);

   YY_Shift_Reduce_Matrix : constant array (-1 .. 277) of Shift_Reduce_Entry :=
    ((   -1,    -1), (    2,     3), (   -1,    -3), (    3,     9),
     (   22,     7), (   -1,   -14), (   -1,    -2), (   27,    10),
     (   -1, -3000), (    0, -3001), (   -1, -3000), (    3,     9),
     (    6,    12), (   22,     7), (   -1,   -21), (   -1,   -13),
     (   -1,   -15), (   -1,   -16), (    4,    15), (   -1, -3000),
     (   24,    16), (   -1, -3000), (   -1, -3000), (   11,    18),
     (   12,    19), (   -1,   -23), (   23,    21), (   -1, -3000),
     (   -1,   -12), (   -1,   -17), (   20,    23), (   -1, -3000),
     (   -1,   -22), (   13,    24), (   -1, -3000), (   14,    25),
     (   -1, -3000), (   -1,   -18), (   10,    29), (   -1,   -95),
     (    3,     9), (   22,     7), (   -1,   -14), (   28,    31),
     (   -1,    -9), (   -1,   -24), (   13,    33), (   -1, -3000),
     (    7,    39), (    8,    40), (   22,    38), (   -1,   -31),
     (    9,    42), (   10,    29), (   26,    43), (   -1, -3000),
     (   -1,   -94), (   24,    45), (   -1, -3000), (    3,     9),
     (   22,     7), (   -1,    -1), (   24,    46), (   -1, -3000),
     (   29,    47), (   -1,   -11), (   -1,   -25), (    7,    39),
     (    8,    40), (   22,    38), (   -1,   -26), (   -1,   -30),
     (   -1,   -32), (   -1,   -33), (   -1,   -34), (   10,    50),
     (   17,    51), (   -1, -3000), (   30,    52), (   31,    53),
     (   32,    56), (   -1, -3000), (   15,    60), (   -1,   -28),
     (   -1,   -82), (   -1,   -84), (   -1,   -93), (   18,    63),
     (   -1, -3000), (   20,    65), (   -1, -3000), (   24,    66),
     (   -1, -3000), (    4,    67), (   -1, -3000), (   -1,   -29),
     (   11,    18), (   12,    19), (   18,    70), (   -1, -3000),
     (   10,    72), (   -1, -3000), (   -1,   -47), (   -1,   -48),
     (   -1,   -49), (   -1,   -50), (   10,    73), (   32,    78),
     (   39,    79), (   -1, -3000), (   36,    80), (   37,    81),
     (   38,    82), (   -1,   -54), (   36,    83), (   37,    84),
     (   38,    85), (   -1,   -58), (    9,    86), (   -1, -3000),
     (    7,    39), (    8,    40), (   22,    38), (   -1,   -31),
     (    9,    88), (   -1, -3000), (    2,    96), (    3,     9),
     (   20,    92), (   22,    93), (   23,    21), (   -1,   -87),
     (   20,    98), (   -1,   -45), (   -1,   -96), (   -1,    -8),
     (   20,    99), (   -1, -3000), (   -1,    -4), (   -1,   -37),
     (   21,   100), (   -1,   -38), (   20,    98), (   -1,   -45),
     (    9,   102), (   -1, -3000), (   11,    18), (   12,    19),
     (   18,    70), (   -1, -3000), (   36,   106), (   37,   107),
     (   38,   108), (   -1,   -68), (   36,   109), (   37,   110),
     (   38,   111), (   -1,   -72), (   36,   112), (   37,   113),
     (   38,   114), (   -1,   -76), (   33,   115), (   35,   116),
     (   -1, -3000), (   10,    73), (   32,    78), (   -1,   -64),
     (   10,    73), (   32,    78), (   -1, -3000), (   10,   120),
     (   33,   121), (   -1, -3000), (   -1,   -51), (   -1,   -52),
     (   -1,   -53), (   -1,   -55), (   -1,   -56), (   -1,   -57),
     (   -1,   -46), (    7,    39), (    8,    40), (   16,   122),
     (   22,    38), (   -1, -3000), (   -1,   -19), (    2,    96),
     (    3,     9), (   20,    92), (   22,    93), (   23,    21),
     (   25,   124), (   -1, -3000), (   -1,   -86), (   -1,   -88),
     (   -1,   -89), (   -1,   -90), (   -1,   -91), (   -1,   -92),
     (   27,   126), (   -1,    -7), (   19,   129), (   20,   128),
     (   -1, -3000), (   -1,   -44), (   -1,   -10), (   10,   130),
     (   -1, -3000), (   19,   131), (   20,   128), (   -1, -3000),
     (   -1,   -35), (   -1,   -40), (   -1,   -41), (    9,   132),
     (   -1, -3000), (   -1,   -65), (   -1,   -66), (   -1,   -67),
     (   -1,   -69), (   -1,   -70), (   -1,   -71), (   -1,   -73),
     (   -1,   -74), (   -1,   -75), (   -1,   -60), (   10,    73),
     (   32,    78), (   -1, -3000), (   33,   134), (   34,   135),
     (   -1, -3000), (   -1,   -62), (   10,   137), (   33,   136),
     (   -1, -3000), (   -1,   -80), (   -1,   -78), (   -1,   -27),
     (    3,     9), (   22,     7), (   -1,   -14), (    9,   139),
     (   -1, -3000), (   -1,   -85), (   24,   140), (   -1, -3000),
     (   28,   141), (   -1, -3000), (   -1,   -43), (   -1,   -97),
     (   -1,   -39), (   -1,   -42), (   -1,   -36), (   -1,   -63),
     (   -1,   -59), (   10,    73), (   32,    78), (   -1, -3000),
     (   37,   143), (   -1, -3000), (   -1,   -79), (    3,     9),
     (   22,     7), (   -1,   -20), (   -1,   -83), (   20,   144),
     (   -1, -3000), (   24,   145), (   -1, -3000), (   -1,   -61),
     (   -1,   -77), (   -1,    -6), (   20,   146), (   -1, -3000),
     (    4,   147), (   -1, -3000), (   -1,    -5));

   YY_Shift_Reduce_Offset : constant array (0 .. 147) of Integer :=
    (    0,    2,    5,    6,    8,   10,   14,   15,
        16,   17,   19,   21,   22,   25,   27,   28,
        29,   31,   32,   34,   36,   37,   39,   42,
        44,   45,   47,   51,   55,   56,   58,   61,
        63,   65,   66,   70,   71,   72,   73,   74,
        77,   81,   83,   84,   85,   86,   88,   90,
        92,   94,   95,   99,  101,  102,  103,  104,
       105,  109,  113,  117,  119,  123,  125,  131,
       133,  134,  135,  137,  138,  139,  141,  143,
       145,  149,  153,  157,  161,  164,  167,  170,
       173,  174,  175,  176,  177,  178,  179,  180,
       185,  186,  193,  194,  195,  196,  197,  198,
       199,  201,  204,  205,  206,  208,  211,  212,
       213,  214,  216,  217,  218,  219,  220,  221,
       222,  223,  224,  225,  226,  229,  232,  233,
       236,  237,  238,  239,  242,  244,  245,  247,
       249,  250,  251,  252,  253,  254,  255,  256,
       259,  261,  262,  265,  266,  268,  270,  271,
       272,  273,  275,  277);

end Matreshka.SAX.Simple_Readers.Parser.Tables;

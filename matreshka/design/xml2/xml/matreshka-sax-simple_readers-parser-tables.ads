------------------------------------------------------------------------------
--                                                                          --
--                            Matreshka Project                             --
--                                                                          --
--                              XML Processor                               --
--                                                                          --
--                              Tools Component                             --
--                                                                          --
------------------------------------------------------------------------------
--                                                                          --
-- Copyright Â© 2010, Vadim Godunko <vgodunko@gmail.com>                      --
-- All rights reserved.                                                     --
--                                                                          --
-- Redistribution and use in source and binary forms, with or without       --
-- modification, are permitted provided that the following conditions       --
-- are met:                                                                 --
--                                                                          --
--  * Redistributions of source code must retain the above copyright        --
--    notice, this list of conditions and the following disclaimer.         --
--                                                                          --
--  * Redistributions in binary form must reproduce the above copyright     --
--    notice, this list of conditions and the following disclaimer in the   --
--    documentation and/or other materials provided with the distribution.  --
--                                                                          --
--  * Neither the name of the Vadim Godunko, IE nor the names of its        --
--    contributors may be used to endorse or promote products derived from  --
--    this software without specific prior written permission.              --
--                                                                          --
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS      --
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT        --
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    --
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     --
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   --
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED --
-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   --
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   --
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     --
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       --
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             --
--                                                                          --
------------------------------------------------------------------------------
--  $Revision$ $Date$
------------------------------------------------------------------------------

private package Matreshka.SAX.Simple_Readers.Parser.Tables is

   pragma Preelaborate;

   type Goto_Entry is record
      Nonterm  : Integer;
      Newstate : Integer;
   end record;

   type Shift_Reduce_Entry is record
      T   : Integer;
      Act : Integer;
   end record;

   YY_Default           : constant :=    -1;
   YY_First_Shift_Entry : constant :=     0;
   YY_Accept_Code       : constant := -3001;
   YY_Error_Code        : constant := -3000;

   YY_Goto_Matrix : constant array (-1 .. 118) of Goto_Entry :=
    ((   -1,    -1), (   -7,     2), (   -3,     1), (   -2,     4),
     (  -13,     8), (  -12,     6), (   -4,     5), (  -13,     8),
     (  -12,    14), (   -5,    13), (  -19,    17), (  -14,    20),
     (   -6,    22), (  -15,    26), (  -47,    28), (  -43,    27),
     (  -13,     8), (  -12,     6), (   -4,    30), (   -8,    32),
     (  -24,    38), (  -23,    37), (  -22,    36), (  -21,    35),
     (  -20,    34), (  -16,    43), (  -47,    46), (  -13,     8),
     (  -12,    14), (   -9,    50), (  -24,    38), (  -23,    37),
     (  -22,    36), (  -21,    51), (  -33,    60), (  -32,    59),
     (  -31,    57), (  -30,    56), (  -29,    61), (  -39,    63),
     (  -38,    62), (  -17,    66), (  -44,    67), (  -42,    69),
     (  -27,    73), (  -25,    76), (  -19,    74), (  -36,    81),
     (  -34,    82), (  -33,    80), (  -32,    79), (  -39,    93),
     (  -24,    38), (  -23,    37), (  -22,    36), (  -21,    35),
     (  -20,   104), (  -46,   107), (  -45,   106), (  -13,   111),
     (  -10,   112), (   -6,   108), (  -28,   114), (  -28,   118),
     (  -27,   120), (  -26,   122), (  -19,   121), (  -35,   134),
     (  -36,    81), (  -34,    82), (  -33,    80), (  -32,    79),
     (  -37,   136), (  -42,   141), (  -40,   143), (  -42,   141),
     (  -40,   144), (  -42,   141), (  -40,   145), (  -42,   141),
     (  -40,   146), (  -42,   141), (  -40,   147), (  -42,   141),
     (  -40,   148), (  -42,   141), (  -40,   149), (  -42,   141),
     (  -40,   150), (  -24,    38), (  -23,    37), (  -22,    36),
     (  -21,    51), (  -18,   154), (  -46,   156), (  -13,   111),
     (  -10,   112), (   -6,   108), (  -11,   158), (  -34,   164),
     (  -33,    80), (  -32,    79), (  -34,   167), (  -33,    80),
     (  -32,    79), (  -42,   171), (  -41,   173), (  -13,     8),
     (  -12,     6), (   -4,   175), (  -34,   179), (  -33,    80),
     (  -32,    79), (  -41,   182), (  -13,     8), (  -12,    14),
     (  -42,   141), (  -40,   189), (  -42,   141), (  -40,   192));

   YY_Goto_Offset : constant array (0 .. 193) of Integer :=
    (    0,    3,    6,    6,    6,    6,    9,    9,
         9,    9,    9,    9,    9,   11,   12,   12,
        12,   12,   12,   12,   12,   13,   15,   18,
        19,   19,   19,   25,   26,   26,   26,   28,
        28,   29,   29,   33,   33,   33,   33,   33,
        33,   33,   38,   40,   41,   42,   42,   42,
        43,   43,   43,   43,   43,   46,   46,   46,
        46,   46,   46,   50,   50,   50,   50,   51,
        51,   51,   56,   56,   61,   62,   62,   62,
        62,   62,   62,   62,   63,   63,   66,   66,
        66,   66,   66,   67,   71,   72,   72,   72,
        72,   72,   72,   72,   72,   72,   72,   74,
        76,   78,   80,   82,   84,   86,   88,   88,
        88,   92,   93,   97,   97,   97,   97,   97,
        97,   97,   98,   98,   98,   98,   98,   98,
        98,   98,   98,   98,   98,   98,   98,   98,
        98,   98,   98,   98,   98,   98,  101,  101,
       104,  104,  104,  104,  104,  104,  104,  105,
       105,  105,  105,  105,  105,  105,  105,  105,
       105,  106,  106,  109,  109,  109,  109,  109,
       109,  109,  109,  109,  109,  109,  109,  112,
       112,  112,  112,  112,  112,  113,  113,  113,
       115,  115,  115,  115,  115,  115,  115,  115,
       117,  117,  117,  117,  117,  119,  119,  119,
       119,  119);

   YY_Rule_Length : constant array (0 .. 119) of Integer :=
    (    2,    5,    1,    0,    7,    6,    3,    0,
         3,    0,    3,    0,    2,    1,    0,    1,
         1,    2,    0,    0,    8,    0,    1,    0,
         2,    3,    1,    3,    0,    2,    1,    0,
         1,    1,    1,    1,    4,    5,    1,    1,
         3,    1,    1,    3,    2,    1,    0,    3,
         1,    1,    1,    1,    2,    2,    2,    1,
         2,    2,    2,    1,    4,    3,    3,    2,
         3,    1,    2,    2,    2,    1,    2,    2,
         2,    1,    2,    2,    2,    1,    5,    3,
         3,    2,    0,    3,    2,    1,    0,    3,
         3,    3,    3,    3,    3,    3,    3,    7,
         6,    3,    2,    0,    1,    1,    1,    2,
         0,    7,    3,    2,    1,    0,    1,    1,
         1,    1,    1,    2,    1,    0,    3,    3);

   YY_Get_LHS_Rule : constant array (0 .. 119) of Integer :=
    (   -1,   -2,   -3,   -3,   -7,  -10,  -11,  -11,
        -8,   -8,   -9,   -9,   -4,   -4,   -4,  -12,
       -12,  -13,  -15,  -18,   -5,   -5,  -14,  -14,
       -19,  -19,  -16,  -17,  -17,  -20,  -20,  -20,
       -21,  -21,  -21,  -21,  -22,  -22,  -25,  -25,
       -25,  -26,  -26,  -27,  -28,  -28,  -28,  -23,
       -29,  -29,  -29,  -29,  -31,  -31,  -31,  -31,
       -31,  -31,  -31,  -31,  -32,  -33,  -35,  -35,
       -36,  -36,  -34,  -34,  -34,  -34,  -34,  -34,
       -34,  -34,  -34,  -34,  -34,  -34,  -30,  -30,
       -37,  -37,  -37,  -24,  -38,  -38,  -38,  -39,
       -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
       -39,  -41,  -41,  -41,  -40,  -40,  -40,  -40,
       -44,   -6,   -6,  -45,  -45,  -45,  -46,  -46,
       -46,  -46,  -46,  -43,  -43,  -43,  -47,  -42);

   YY_Shift_Reduce_Matrix : constant array (-1 .. 395) of Shift_Reduce_Entry :=
    ((   -1,    -1), (    2,     3), (   -1,    -3), (    3,     9),
     (   22,     7), (   -1,   -14), (   -1,    -2), (   27,    10),
     (   -1, -3000), (    0, -3001), (   -1, -3000), (    3,     9),
     (    6,    12), (   22,     7), (   -1,   -21), (   -1,   -13),
     (   -1,   -15), (   -1,   -16), (    4,    15), (   -1, -3000),
     (   24,    16), (   -1, -3000), (   -1, -3000), (   11,    18),
     (   12,    19), (   -1,   -23), (   23,    21), (   -1, -3000),
     (   -1,   -12), (   -1,   -17), (   20,    23), (   -1, -3000),
     (   -1,   -22), (   13,    24), (   -1, -3000), (   14,    25),
     (   -1, -3000), (   -1,   -18), (   10,    29), (   -1,  -117),
     (    3,     9), (   22,     7), (   -1,   -14), (   28,    31),
     (   -1,    -9), (   -1,   -24), (   13,    33), (   -1, -3000),
     (    7,    40), (    8,    41), (   22,    39), (   40,    42),
     (   -1,   -31), (    9,    44), (   10,    29), (   26,    45),
     (   -1, -3000), (   -1,  -116), (   24,    47), (   -1, -3000),
     (    3,     9), (   22,     7), (   -1,    -1), (   24,    48),
     (   -1, -3000), (   29,    49), (   -1,   -11), (   -1,   -25),
     (    7,    40), (    8,    41), (   22,    39), (   40,    42),
     (   -1,   -26), (   -1,   -30), (   -1,   -32), (   -1,   -33),
     (   -1,   -34), (   -1,   -35), (   10,    52), (   17,    53),
     (   -1, -3000), (   30,    54), (   31,    55), (   32,    58),
     (   -1, -3000), (   10,    64), (   -1,   -86), (   15,    65),
     (   -1,   -28), (   -1,  -104), (   -1,  -106), (   -1,  -115),
     (   18,    68), (   -1, -3000), (   20,    70), (   -1, -3000),
     (   24,    71), (   -1, -3000), (    4,    72), (   -1, -3000),
     (   -1,   -29), (   11,    18), (   12,    19), (   18,    75),
     (   -1, -3000), (   10,    77), (   -1, -3000), (   -1,   -48),
     (   -1,   -49), (   -1,   -50), (   -1,   -51), (   10,    78),
     (   32,    83), (   39,    84), (   -1, -3000), (   36,    85),
     (   37,    86), (   38,    87), (   -1,   -55), (   36,    88),
     (   37,    89), (   38,    90), (   -1,   -59), (    9,    91),
     (   -1, -3000), (    9,    92), (   10,    64), (   -1, -3000),
     (   -1,   -85), (   32,   103), (   41,    94), (   42,    95),
     (   43,    96), (   44,    97), (   45,    98), (   46,    99),
     (   47,   100), (   48,   101), (   49,   102), (   -1, -3000),
     (    7,    40), (    8,    41), (   22,    39), (   40,    42),
     (   -1,   -31), (    9,   105), (   -1, -3000), (    2,   113),
     (    3,     9), (   20,   109), (   22,   110), (   23,    21),
     (   -1,  -109), (   20,   115), (   -1,   -46), (   -1,  -118),
     (   -1,    -8), (   20,   116), (   -1, -3000), (   -1,    -4),
     (   -1,   -38), (   21,   117), (   -1,   -39), (   20,   115),
     (   -1,   -46), (    9,   119), (   -1, -3000), (   11,    18),
     (   12,    19), (   18,    75), (   -1, -3000), (   36,   123),
     (   37,   124), (   38,   125), (   -1,   -69), (   36,   126),
     (   37,   127), (   38,   128), (   -1,   -73), (   36,   129),
     (   37,   130), (   38,   131), (   -1,   -77), (   33,   132),
     (   35,   133), (   -1, -3000), (   34,   135), (   -1,   -65),
     (   10,    78), (   32,    83), (   -1, -3000), (   33,   138),
     (   34,   137), (   -1, -3000), (   -1,   -52), (   -1,   -53),
     (   -1,   -54), (   -1,   -56), (   -1,   -57), (   -1,   -58),
     (   -1,   -47), (   -1,   -83), (   -1,   -84), (   18,    68),
     (   50,   139), (   51,   140), (   52,   142), (   -1, -3000),
     (   18,    68), (   50,   139), (   51,   140), (   52,   142),
     (   -1, -3000), (   18,    68), (   50,   139), (   51,   140),
     (   52,   142), (   -1, -3000), (   18,    68), (   50,   139),
     (   51,   140), (   52,   142), (   -1, -3000), (   18,    68),
     (   50,   139), (   51,   140), (   52,   142), (   -1, -3000),
     (   18,    68), (   50,   139), (   51,   140), (   52,   142),
     (   -1, -3000), (   18,    68), (   50,   139), (   51,   140),
     (   52,   142), (   -1, -3000), (   18,    68), (   50,   139),
     (   51,   140), (   52,   142), (   -1, -3000), (   32,   151),
     (   -1, -3000), (   10,   152), (   -1, -3000), (    7,    40),
     (    8,    41), (   16,   153), (   22,    39), (   40,    42),
     (   -1, -3000), (   -1,   -19), (    2,   113), (    3,     9),
     (   20,   109), (   22,   110), (   23,    21), (   25,   155),
     (   -1, -3000), (   -1,  -108), (   -1,  -110), (   -1,  -111),
     (   -1,  -112), (   -1,  -113), (   -1,  -114), (   27,   157),
     (   -1,    -7), (   19,   160), (   20,   159), (   -1, -3000),
     (   -1,   -45), (   -1,   -10), (   10,   161), (   -1, -3000),
     (   19,   162), (   20,   159), (   -1, -3000), (   -1,   -36),
     (   -1,   -41), (   -1,   -42), (    9,   163), (   -1, -3000),
     (   -1,   -66), (   -1,   -67), (   -1,   -68), (   -1,   -70),
     (   -1,   -71), (   -1,   -72), (   -1,   -74), (   -1,   -75),
     (   -1,   -76), (   -1,   -61), (   10,    78), (   32,    83),
     (   -1, -3000), (   33,   165), (   34,   166), (   -1, -3000),
     (   10,    78), (   32,    83), (   -1, -3000), (   33,   168),
     (   34,   169), (   -1, -3000), (   10,   170), (   -1, -3000),
     (   -1,   -79), (   -1,  -100), (   -1,  -101), (   -1,  -102),
     (   18,    68), (   -1, -3000), (   -1,   -87), (   -1,   -88),
     (   -1,   -89), (   -1,   -90), (   -1,   -91), (   -1,   -92),
     (   -1,   -93), (   -1,   -94), (   10,   172), (   -1, -3000),
     (   34,   174), (   -1,   -99), (   -1,   -27), (    3,     9),
     (   22,     7), (   -1,   -14), (    9,   176), (   -1, -3000),
     (   -1,  -107), (   24,   177), (   -1, -3000), (   28,   178),
     (   -1, -3000), (   -1,   -44), (   -1,  -119), (   -1,   -40),
     (   -1,   -43), (   -1,   -37), (   -1,   -64), (   -1,   -60),
     (   10,    78), (   32,    83), (   -1, -3000), (   -1,   -63),
     (   37,   180), (   -1, -3000), (   10,   181), (   -1, -3000),
     (   -1,   -81), (   -1,  -103), (   34,   174), (   -1,   -99),
     (   33,   183), (   34,   184), (   -1, -3000), (   10,   185),
     (   -1, -3000), (    3,     9), (   22,     7), (   -1,   -20),
     (   -1,  -105), (   20,   186), (   -1, -3000), (   24,   187),
     (   -1, -3000), (   -1,   -62), (   -1,   -78), (   -1,   -80),
     (   33,   188), (   34,   184), (   -1, -3000), (   18,    68),
     (   50,   139), (   51,   140), (   52,   142), (   -1, -3000),
     (   10,   190), (   -1, -3000), (   -1,   -98), (   -1,    -6),
     (   20,   191), (   -1, -3000), (   18,    68), (   50,   139),
     (   51,   140), (   52,   142), (   -1, -3000), (   -1,   -96),
     (   -1,   -97), (    4,   193), (   -1, -3000), (   -1,   -95),
     (   -1,    -5));

   YY_Shift_Reduce_Offset : constant array (0 .. 193) of Integer :=
    (    0,    2,    5,    6,    8,   10,   14,   15,
        16,   17,   19,   21,   22,   25,   27,   28,
        29,   31,   32,   34,   36,   37,   39,   42,
        44,   45,   47,   52,   56,   57,   59,   62,
        64,   66,   67,   72,   73,   74,   75,   76,
        77,   80,   84,   86,   88,   89,   90,   91,
        93,   95,   97,   99,  100,  104,  106,  107,
       108,  109,  110,  114,  118,  122,  124,  127,
       128,  139,  144,  146,  152,  154,  155,  156,
       158,  159,  160,  162,  164,  166,  170,  174,
       178,  182,  185,  187,  190,  193,  194,  195,
       196,  197,  198,  199,  200,  201,  202,  207,
       212,  217,  222,  227,  232,  237,  242,  244,
       246,  252,  253,  260,  261,  262,  263,  264,
       265,  266,  268,  271,  272,  273,  275,  278,
       279,  280,  281,  283,  284,  285,  286,  287,
       288,  289,  290,  291,  292,  293,  296,  299,
       302,  305,  307,  308,  309,  310,  311,  313,
       314,  315,  316,  317,  318,  319,  320,  321,
       323,  325,  326,  329,  331,  332,  334,  336,
       337,  338,  339,  340,  341,  342,  343,  346,
       347,  349,  351,  352,  353,  355,  358,  360,
       363,  364,  366,  368,  369,  370,  371,  374,
       379,  381,  382,  383,  385,  390,  391,  392,
       394,  395);

end Matreshka.SAX.Simple_Readers.Parser.Tables;

--  EXPECTED OUTPUT:
--  { A: [ 1, 2, 3, 2 ],
--    _first: [ 1 ],
--    _last: [ 4 ],
--    _length: [ 4 ],
--    _offset: 0 }
--  { A: [ 1, 2, 1, 2 ],
--    _first: [ 1 ],
--    _last: [ 4 ],
--    _length: [ 4 ],
--    _offset: 0 }
--  END OF EXPECTED OUTPUT
--
--  BIND LIST:
--  consoles.ads
--  slice.adb
--  END OF BIND LIST
--
--  MAIN: slice

with Consoles;
procedure Slice is
   use Consoles;
   Test : Int_Matrix (1 .. 2);
begin
   Test (1) (1 .. 2) := (1, 2);
   Test (1) (3 .. Test (1)'Last) := Test (1) (Test (1)'First .. 2);
   Test (2 .. 2) := Test (1 .. 1);
   Test (1) (3) := 3;
   Console.Log (Test (1));
   Console.Log (Test (2));
end;

package Consoles is
   type Int_Array is array (Positive range <>) of Integer;
   type Int_Matrix is array (Positive range <>) of Int_Array (1 .. 4);
   type Console_Type is tagged limited null record;

   type Console_Access is access all Console_Type'Class
     with Storage_Size => 0;

   not overriding procedure Log
     (Self : not null access Console_Type;
      Text : Int_Array)
     with Import     => True,
          Convention => JavaScript_Function,
          Link_Name  => "log";

   Console : constant Consoles.Console_Access
     with Import     => True,
       Convention => JavaScript;
end Consoles;

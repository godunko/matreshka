------------------------------------------------------------------------------
--                                                                          --
--                            Matreshka Project                             --
--                                                                          --
--                              XML Processor                               --
--                                                                          --
--                        Runtime Library Component                         --
--                                                                          --
------------------------------------------------------------------------------
--                                                                          --
-- Copyright Â© 2010, Vadim Godunko <vgodunko@gmail.com>                     --
-- All rights reserved.                                                     --
--                                                                          --
-- Redistribution and use in source and binary forms, with or without       --
-- modification, are permitted provided that the following conditions       --
-- are met:                                                                 --
--                                                                          --
--  * Redistributions of source code must retain the above copyright        --
--    notice, this list of conditions and the following disclaimer.         --
--                                                                          --
--  * Redistributions in binary form must reproduce the above copyright     --
--    notice, this list of conditions and the following disclaimer in the   --
--    documentation and/or other materials provided with the distribution.  --
--                                                                          --
--  * Neither the name of the Vadim Godunko, IE nor the names of its        --
--    contributors may be used to endorse or promote products derived from  --
--    this software without specific prior written permission.              --
--                                                                          --
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS      --
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT        --
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    --
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     --
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   --
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED --
-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   --
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   --
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     --
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       --
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             --
--                                                                          --
------------------------------------------------------------------------------
--  $Revision$ $Date$
------------------------------------------------------------------------------

private package Matreshka.SAX.Simple_Readers.Parser.Tables is

   pragma Preelaborate;

   type Goto_Entry is record
      Nonterm  : Integer;
      Newstate : Integer;
   end record;

   type Shift_Reduce_Entry is record
      T   : Integer;
      Act : Integer;
   end record;

   YY_Default           : constant :=    -1;
   YY_First_Shift_Entry : constant :=     0;
   YY_Accept_Code       : constant := -3001;
   YY_Error_Code        : constant := -3000;

   YY_Goto_Matrix : constant array (-1 .. 123) of Goto_Entry :=
    ((   -1,    -1), (   -7,     2), (   -3,     1), (   -2,     4),
     (  -14,     8), (  -13,     6), (   -4,     5), (  -14,     8),
     (  -13,    14), (   -5,    13), (  -17,    21), (  -15,    20),
     (   -6,    23), (  -26,    31), (  -25,    30), (  -24,    29),
     (  -23,    28), (  -22,    27), (  -16,    36), (  -43,    38),
     (  -14,     8), (  -13,     6), (   -4,    40), (   -8,    41),
     (  -26,    31), (  -25,    30), (  -24,    29), (  -23,    44),
     (  -33,    53), (  -32,    52), (  -31,    50), (  -30,    49),
     (  -29,    54), (  -39,    56), (  -38,    55), (  -17,    58),
     (  -21,    59), (  -14,     8), (  -13,    14), (   -9,    65),
     (  -27,    67), (  -15,    68), (  -36,    73), (  -34,    74),
     (  -33,    72), (  -32,    71), (  -39,    85), (  -18,    96),
     (  -14,     8), (  -13,     6), (   -4,    97), (  -44,    98),
     (  -42,   101), (  -10,   104), (  -28,   105), (  -27,   110),
     (  -15,   111), (  -35,   123), (  -36,    73), (  -34,    74),
     (  -33,    72), (  -32,    71), (  -37,   125), (  -42,   130),
     (  -40,   132), (  -42,   130), (  -40,   133), (  -42,   130),
     (  -40,   134), (  -42,   130), (  -40,   135), (  -42,   130),
     (  -40,   136), (  -42,   130), (  -40,   137), (  -42,   130),
     (  -40,   138), (  -42,   130), (  -40,   139), (  -26,    31),
     (  -25,    30), (  -24,    29), (  -23,    28), (  -22,   142),
     (  -19,   143), (  -14,     8), (  -13,    14), (  -46,   145),
     (  -45,   144), (  -14,   149), (  -11,   150), (   -6,   146),
     (  -42,   152), (  -28,   153), (  -34,   162), (  -33,    72),
     (  -32,    71), (  -34,   165), (  -33,    72), (  -32,    71),
     (  -42,   169), (  -41,   171), (  -26,    31), (  -25,    30),
     (  -24,    29), (  -23,    44), (  -46,   175), (  -14,   149),
     (  -11,   150), (   -6,   146), (  -12,   177), (  -34,   181),
     (  -33,    72), (  -32,    71), (  -41,   184), (  -20,   188),
     (  -42,   130), (  -40,   193), (  -14,     8), (  -13,     6),
     (   -4,   195), (  -42,   130), (  -40,   198), (  -14,     8),
     (  -13,    14));

   YY_Goto_Offset : constant array (0 .. 200) of Integer :=
    (    0,    3,    6,    6,    6,    6,    9,    9,
         9,    9,    9,    9,    9,   11,   12,   12,
        12,   12,   12,   12,   17,   18,   18,   19,
        22,   23,   23,   23,   27,   27,   27,   27,
        27,   27,   27,   32,   34,   35,   36,   36,
        36,   38,   39,   39,   39,   39,   41,   41,
        41,   41,   41,   41,   45,   45,   45,   45,
        46,   46,   46,   47,   50,   51,   51,   51,
        52,   52,   53,   54,   54,   54,   56,   56,
        56,   56,   56,   57,   61,   62,   62,   62,
        62,   62,   62,   62,   62,   62,   62,   64,
        66,   68,   70,   72,   74,   76,   78,   78,
        78,   84,   86,   91,   92,   93,   93,   93,
        93,   93,   93,   93,   93,   93,   93,   93,
        93,   93,   93,   93,   93,   93,   93,   93,
        93,   93,   93,   96,   96,   99,   99,   99,
        99,   99,   99,   99,  100,  100,  100,  100,
       100,  100,  100,  100,  100,  100,  101,  105,
       105,  109,  109,  109,  109,  109,  109,  109,
       110,  110,  110,  110,  110,  110,  110,  110,
       110,  110,  110,  110,  110,  113,  113,  113,
       113,  113,  113,  114,  114,  114,  115,  115,
       115,  115,  115,  115,  115,  115,  115,  115,
       115,  115,  117,  117,  117,  120,  120,  120,
       120,  122,  122,  122,  124,  124,  124,  124,
       124);

   YY_Rule_Length : constant array (0 .. 118) of Integer :=
    (    2,    5,    1,    0,    0,    8,    6,    3,
         0,    3,    0,    3,    0,    2,    1,    0,
         1,    1,    2,    0,    0,    0,    9,    0,
         5,    0,    2,    3,    1,    3,    0,    2,
         1,    0,    1,    1,    1,    1,    4,    4,
         6,    5,    5,    3,    2,    1,    0,    3,
         1,    1,    1,    1,    2,    2,    2,    1,
         2,    2,    2,    1,    4,    3,    3,    2,
         3,    1,    2,    2,    2,    1,    2,    2,
         2,    1,    2,    2,    2,    1,    5,    3,
         3,    2,    0,    3,    2,    1,    0,    3,
         3,    3,    3,    3,    3,    3,    3,    7,
         6,    3,    2,    0,    1,    1,    1,    2,
         0,    7,    3,    2,    1,    0,    1,    1,
         1,    1,    1,    4,    3,    0,    3);

   YY_Get_LHS_Rule : constant array (0 .. 118) of Integer :=
    (   -1,   -2,   -3,   -3,   -8,   -7,  -11,  -12,
       -12,   -9,   -9,  -10,  -10,   -4,   -4,   -4,
       -13,  -13,  -14,  -16,  -18,  -20,   -5,  -21,
        -5,   -5,  -15,  -15,  -19,  -17,  -17,  -22,
       -22,  -22,  -23,  -23,  -23,  -23,  -24,  -24,
       -24,  -24,  -24,  -27,  -28,  -28,  -28,  -25,
       -29,  -29,  -29,  -29,  -31,  -31,  -31,  -31,
       -31,  -31,  -31,  -31,  -32,  -33,  -35,  -35,
       -36,  -36,  -34,  -34,  -34,  -34,  -34,  -34,
       -34,  -34,  -34,  -34,  -34,  -34,  -30,  -30,
       -37,  -37,  -37,  -26,  -38,  -38,  -38,  -39,
       -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
       -39,  -41,  -41,  -41,  -40,  -40,  -40,  -40,
       -44,   -6,   -6,  -45,  -45,  -45,  -46,  -46,
       -46,  -46,  -46,  -43,  -43,  -43,  -42);

   YY_Shift_Reduce_Matrix : constant array (-1 .. 413) of Shift_Reduce_Entry :=
    ((   -1,    -1), (    2,     3), (   -1,    -3), (    3,     9),
     (   22,     7), (   -1,   -15), (   -1,    -2), (   27,    10),
     (   -1, -3000), (    0, -3001), (   -1, -3000), (    3,     9),
     (    6,    12), (   22,     7), (   -1,   -25), (   -1,   -14),
     (   -1,   -16), (   -1,   -17), (    4,    15), (   -1, -3000),
     (   24,    16), (   -1, -3000), (   -1, -3000), (   11,    17),
     (   12,    18), (   15,    19), (   -1,   -30), (   23,    22),
     (   -1, -3000), (   -1,   -13), (   -1,   -18), (   20,    24),
     (   -1, -3000), (   13,    25), (   -1, -3000), (   14,    26),
     (   -1, -3000), (    7,    33), (    8,    34), (   22,    32),
     (   40,    35), (   -1,   -33), (   -1,   -19), (    9,    37),
     (   -1, -3000), (   10,    39), (   -1,  -117), (    3,     9),
     (   22,     7), (   -1,   -15), (   -1,    -4), (   -1,   -26),
     (   13,    42), (   -1, -3000), (    7,    33), (    8,    34),
     (   16,    43), (   22,    32), (   40,    35), (   -1, -3000),
     (   -1,   -32), (   -1,   -34), (   -1,   -35), (   -1,   -36),
     (   -1,   -37), (   10,    45), (   17,    46), (   -1, -3000),
     (   30,    47), (   31,    48), (   32,    51), (   -1, -3000),
     (   10,    57), (   -1,   -86), (   15,    19), (   -1,   -30),
     (   -1,   -23), (    9,    60), (   10,    62), (   26,    61),
     (   -1, -3000), (   24,    63), (   -1, -3000), (    3,     9),
     (   22,     7), (   -1,    -1), (   28,    64), (   -1,   -10),
     (   -1,   -27), (   -1,   -29), (   -1,   -31), (   11,    17),
     (   12,    18), (   18,    66), (   -1, -3000), (   10,    69),
     (   -1, -3000), (   -1,   -48), (   -1,   -49), (   -1,   -50),
     (   -1,   -51), (   10,    70), (   32,    75), (   39,    76),
     (   -1, -3000), (   36,    77), (   37,    78), (   38,    79),
     (   -1,   -55), (   36,    80), (   37,    81), (   38,    82),
     (   -1,   -59), (    9,    83), (   -1, -3000), (    9,    84),
     (   10,    57), (   -1, -3000), (   -1,   -85), (   32,    95),
     (   41,    86), (   42,    87), (   43,    88), (   44,    89),
     (   45,    90), (   46,    91), (   47,    92), (   48,    93),
     (   49,    94), (   -1, -3000), (   -1,   -20), (    3,     9),
     (   22,     7), (   -1,   -15), (   -1,  -104), (   -1,  -106),
     (   24,    99), (   -1, -3000), (   18,   100), (   -1, -3000),
     (   24,   102), (   -1, -3000), (   29,   103), (   -1,   -12),
     (   20,   106), (   -1,   -46), (    9,   107), (   -1, -3000),
     (    9,   108), (   21,   109), (   -1, -3000), (   11,    17),
     (   12,    18), (   18,    66), (   -1, -3000), (   36,   112),
     (   37,   113), (   38,   114), (   -1,   -69), (   36,   115),
     (   37,   116), (   38,   117), (   -1,   -73), (   36,   118),
     (   37,   119), (   38,   120), (   -1,   -77), (   33,   121),
     (   35,   122), (   -1, -3000), (   34,   124), (   -1,   -65),
     (   10,    70), (   32,    75), (   -1, -3000), (   33,   127),
     (   34,   126), (   -1, -3000), (   -1,   -52), (   -1,   -53),
     (   -1,   -54), (   -1,   -56), (   -1,   -57), (   -1,   -58),
     (   -1,   -47), (   -1,   -83), (   -1,   -84), (   18,   100),
     (   50,   128), (   51,   129), (   52,   131), (   -1, -3000),
     (   18,   100), (   50,   128), (   51,   129), (   52,   131),
     (   -1, -3000), (   18,   100), (   50,   128), (   51,   129),
     (   52,   131), (   -1, -3000), (   18,   100), (   50,   128),
     (   51,   129), (   52,   131), (   -1, -3000), (   18,   100),
     (   50,   128), (   51,   129), (   52,   131), (   -1, -3000),
     (   18,   100), (   50,   128), (   51,   129), (   52,   131),
     (   -1, -3000), (   18,   100), (   50,   128), (   51,   129),
     (   52,   131), (   -1, -3000), (   18,   100), (   50,   128),
     (   51,   129), (   52,   131), (   -1, -3000), (   32,   140),
     (   -1, -3000), (   10,   141), (   -1, -3000), (    7,    33),
     (    8,    34), (   22,    32), (   40,    35), (   -1,   -33),
     (    3,     9), (   22,     7), (   -1,   -24), (    2,   151),
     (    3,     9), (   20,   147), (   22,   148), (   23,    22),
     (   -1,  -109), (   18,   100), (   -1, -3000), (   20,   106),
     (   -1,   -46), (   -1,  -116), (   20,   154), (   -1, -3000),
     (   24,   155), (   -1, -3000), (    4,   156), (   -1, -3000),
     (   19,   157), (   20,   158), (   -1, -3000), (   -1,   -45),
     (   -1,   -38), (   -1,   -39), (   10,   159), (   -1, -3000),
     (    9,   160), (   -1, -3000), (    9,   161), (   -1, -3000),
     (   -1,   -66), (   -1,   -67), (   -1,   -68), (   -1,   -70),
     (   -1,   -71), (   -1,   -72), (   -1,   -74), (   -1,   -75),
     (   -1,   -76), (   -1,   -61), (   10,    70), (   32,    75),
     (   -1, -3000), (   33,   163), (   34,   164), (   -1, -3000),
     (   10,    70), (   32,    75), (   -1, -3000), (   33,   166),
     (   34,   167), (   -1, -3000), (   10,   168), (   -1, -3000),
     (   -1,   -79), (   -1,  -100), (   -1,  -101), (   -1,  -102),
     (   18,   100), (   -1, -3000), (   -1,   -87), (   -1,   -88),
     (   -1,   -89), (   -1,   -90), (   -1,   -91), (   -1,   -92),
     (   -1,   -93), (   -1,   -94), (   10,   170), (   -1, -3000),
     (   34,   172), (   -1,   -99), (    7,    33), (    8,    34),
     (   22,    32), (   40,    35), (   -1,   -28), (    9,   173),
     (   -1, -3000), (    2,   151), (    3,     9), (   20,   147),
     (   22,   148), (   23,    22), (   25,   174), (   -1, -3000),
     (   -1,  -108), (   -1,  -110), (   -1,  -111), (   -1,  -112),
     (   -1,  -113), (   -1,  -114), (   27,   176), (   -1,    -8),
     (   -1,  -115), (   19,   178), (   20,   158), (   -1, -3000),
     (   -1,    -9), (   20,   179), (   -1, -3000), (   -1,    -5),
     (   -1,   -43), (   -1,   -44), (    9,   180), (   -1, -3000),
     (   -1,   -41), (   -1,   -42), (   -1,   -64), (   -1,   -60),
     (   10,    70), (   32,    75), (   -1, -3000), (   -1,   -63),
     (   37,   182), (   -1, -3000), (   10,   183), (   -1, -3000),
     (   -1,   -81), (   -1,  -103), (   34,   172), (   -1,   -99),
     (   33,   185), (   34,   186), (   -1, -3000), (   10,   187),
     (   -1, -3000), (   -1,   -21), (    9,   189), (   -1, -3000),
     (   -1,  -107), (   24,   190), (   -1, -3000), (   28,   191),
     (   -1, -3000), (   -1,  -118), (   -1,   -11), (   -1,   -40),
     (   -1,   -62), (   -1,   -78), (   -1,   -80), (   33,   192),
     (   34,   186), (   -1, -3000), (   18,   100), (   50,   128),
     (   51,   129), (   52,   131), (   -1, -3000), (   10,   194),
     (   -1, -3000), (   -1,   -98), (    3,     9), (   22,     7),
     (   -1,   -15), (   -1,  -105), (   20,   196), (   -1, -3000),
     (   24,   197), (   -1, -3000), (   18,   100), (   50,   128),
     (   51,   129), (   52,   131), (   -1, -3000), (   -1,   -96),
     (   -1,   -97), (    3,     9), (   22,     7), (   -1,   -22),
     (   -1,    -7), (   20,   199), (   -1, -3000), (   -1,   -95),
     (    4,   200), (   -1, -3000), (   -1,    -6));

   YY_Shift_Reduce_Offset : constant array (0 .. 200) of Integer :=
    (    0,    2,    5,    6,    8,   10,   14,   15,
        16,   17,   19,   21,   22,   26,   28,   29,
        30,   32,   34,   36,   41,   42,   44,   46,
        49,   50,   51,   53,   59,   60,   61,   62,
        63,   64,   67,   71,   73,   75,   76,   80,
        82,   85,   87,   88,   89,   90,   94,   96,
        97,   98,   99,  100,  104,  108,  112,  114,
       117,  118,  129,  130,  133,  134,  135,  137,
       139,  141,  143,  145,  147,  150,  154,  158,
       162,  166,  169,  171,  174,  177,  178,  179,
       180,  181,  182,  183,  184,  185,  186,  191,
       196,  201,  206,  211,  216,  221,  226,  228,
       230,  235,  238,  244,  246,  248,  249,  251,
       253,  255,  258,  259,  260,  261,  263,  265,
       267,  268,  269,  270,  271,  272,  273,  274,
       275,  276,  277,  280,  283,  286,  289,  291,
       292,  293,  294,  295,  297,  298,  299,  300,
       301,  302,  303,  304,  305,  307,  309,  314,
       316,  323,  324,  325,  326,  327,  328,  329,
       331,  332,  335,  336,  338,  339,  340,  341,
       343,  344,  345,  346,  347,  350,  351,  353,
       355,  356,  357,  359,  362,  364,  365,  367,
       368,  370,  372,  373,  374,  375,  376,  377,
       378,  381,  386,  388,  389,  392,  393,  395,
       397,  402,  403,  404,  407,  408,  410,  411,
       413);

end Matreshka.SAX.Simple_Readers.Parser.Tables;

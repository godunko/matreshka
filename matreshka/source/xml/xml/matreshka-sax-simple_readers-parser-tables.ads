------------------------------------------------------------------------------
--                                                                          --
--                            Matreshka Project                             --
--                                                                          --
--                              XML Processor                               --
--                                                                          --
--                        Runtime Library Component                         --
--                                                                          --
------------------------------------------------------------------------------
--                                                                          --
-- Copyright Â© 2010, Vadim Godunko <vgodunko@gmail.com>                     --
-- All rights reserved.                                                     --
--                                                                          --
-- Redistribution and use in source and binary forms, with or without       --
-- modification, are permitted provided that the following conditions       --
-- are met:                                                                 --
--                                                                          --
--  * Redistributions of source code must retain the above copyright        --
--    notice, this list of conditions and the following disclaimer.         --
--                                                                          --
--  * Redistributions in binary form must reproduce the above copyright     --
--    notice, this list of conditions and the following disclaimer in the   --
--    documentation and/or other materials provided with the distribution.  --
--                                                                          --
--  * Neither the name of the Vadim Godunko, IE nor the names of its        --
--    contributors may be used to endorse or promote products derived from  --
--    this software without specific prior written permission.              --
--                                                                          --
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS      --
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT        --
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    --
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     --
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   --
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED --
-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   --
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   --
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     --
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       --
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             --
--                                                                          --
------------------------------------------------------------------------------
--  $Revision$ $Date$
------------------------------------------------------------------------------

private package Matreshka.SAX.Simple_Readers.Parser.Tables is

   pragma Preelaborate;

   type Goto_Entry is record
      Nonterm  : Integer;
      Newstate : Integer;
   end record;

   type Shift_Reduce_Entry is record
      T   : Integer;
      Act : Integer;
   end record;

   YY_Default           : constant :=    -1;
   YY_First_Shift_Entry : constant :=     0;
   YY_Accept_Code       : constant := -3001;
   YY_Error_Code        : constant := -3000;

   YY_Goto_Matrix : constant array (-1 .. 130) of Goto_Entry :=
    ((   -1,    -1), (   -7,     2), (   -3,     1), (   -2,     4),
     (  -14,     8), (  -13,     6), (   -4,     5), (  -14,     8),
     (  -13,    14), (   -5,    13), (  -20,    20), (  -15,    19),
     (   -6,    22), (  -16,    26), (  -26,    31), (  -25,    30),
     (  -24,    29), (  -23,    28), (  -22,    27), (  -17,    36),
     (  -47,    38), (  -43,    37), (  -14,     8), (  -13,     6),
     (   -4,    40), (   -8,    41), (  -26,    31), (  -25,    30),
     (  -24,    29), (  -23,    28), (  -22,    27), (  -17,    43),
     (  -26,    31), (  -25,    30), (  -24,    29), (  -23,    44),
     (  -33,    53), (  -32,    52), (  -31,    50), (  -30,    49),
     (  -29,    54), (  -39,    56), (  -38,    55), (  -18,    59),
     (  -47,    62), (  -14,     8), (  -13,    14), (   -9,    65),
     (  -18,    66), (  -27,    68), (  -15,    69), (  -36,    74),
     (  -34,    75), (  -33,    73), (  -32,    72), (  -39,    86),
     (  -26,    31), (  -25,    30), (  -24,    29), (  -23,    28),
     (  -22,    97), (  -44,    99), (  -42,   101), (  -10,   104),
     (  -28,   106), (  -27,   111), (  -15,   112), (  -35,   124),
     (  -36,    74), (  -34,    75), (  -33,    73), (  -32,    72),
     (  -37,   126), (  -42,   131), (  -40,   133), (  -42,   131),
     (  -40,   134), (  -42,   131), (  -40,   135), (  -42,   131),
     (  -40,   136), (  -42,   131), (  -40,   137), (  -42,   131),
     (  -40,   138), (  -42,   131), (  -40,   139), (  -42,   131),
     (  -40,   140), (  -26,    31), (  -25,    30), (  -24,    29),
     (  -23,    44), (  -21,   144), (  -46,   146), (  -45,   145),
     (  -14,   150), (  -11,   151), (   -6,   147), (  -28,   153),
     (  -19,   157), (  -34,   163), (  -33,    73), (  -32,    72),
     (  -34,   166), (  -33,    73), (  -32,    72), (  -42,   170),
     (  -41,   172), (  -14,     8), (  -13,     6), (   -4,   174),
     (  -46,   176), (  -14,   150), (  -11,   151), (   -6,   147),
     (  -12,   178), (  -14,     8), (  -13,     6), (   -4,   181),
     (  -34,   183), (  -33,    73), (  -32,    72), (  -41,   186),
     (  -14,     8), (  -13,    14), (  -14,     8), (  -13,    14),
     (  -42,   131), (  -40,   194), (  -42,   131), (  -40,   198));

   YY_Goto_Offset : constant array (0 .. 200) of Integer :=
    (    0,    3,    6,    6,    6,    6,    9,    9,
         9,    9,    9,    9,    9,   11,   12,   12,
        12,   12,   12,   12,   13,   19,   21,   24,
        25,   25,   25,   31,   35,   35,   35,   35,
        35,   35,   35,   40,   42,   43,   44,   44,
        44,   46,   47,   47,   48,   48,   50,   50,
        50,   50,   50,   50,   54,   54,   54,   54,
        55,   55,   55,   60,   60,   61,   61,   61,
        62,   62,   63,   63,   64,   64,   64,   66,
        66,   66,   66,   66,   67,   71,   72,   72,
        72,   72,   72,   72,   72,   72,   72,   72,
        74,   76,   78,   80,   82,   84,   86,   88,
        88,   88,   92,   93,   98,   99,   99,   99,
        99,   99,  100,  100,  100,  100,  100,  100,
       100,  100,  100,  100,  100,  100,  100,  100,
       100,  100,  100,  100,  103,  103,  106,  106,
       106,  106,  106,  106,  106,  107,  107,  107,
       107,  107,  107,  107,  107,  107,  107,  108,
       108,  111,  115,  115,  115,  115,  115,  115,
       115,  116,  116,  116,  116,  116,  119,  119,
       119,  119,  119,  119,  119,  119,  122,  122,
       122,  122,  122,  122,  123,  123,  123,  125,
       125,  125,  125,  125,  125,  125,  127,  127,
       127,  127,  127,  127,  129,  129,  129,  129,
       129,  129,  131,  131,  131,  131,  131,  131,
       131);

   YY_Rule_Length : constant array (0 .. 119) of Integer :=
    (    2,    5,    1,    0,    0,    8,    6,    3,
         0,    3,    0,    3,    0,    2,    1,    0,
         1,    1,    2,    0,    0,    8,    0,    0,
         7,    0,    2,    3,    1,    3,    0,    2,
         1,    0,    1,    1,    1,    1,    4,    4,
         6,    5,    5,    3,    2,    1,    0,    3,
         1,    1,    1,    1,    2,    2,    2,    1,
         2,    2,    2,    1,    4,    3,    3,    2,
         3,    1,    2,    2,    2,    1,    2,    2,
         2,    1,    2,    2,    2,    1,    5,    3,
         3,    2,    0,    3,    2,    1,    0,    3,
         3,    3,    3,    3,    3,    3,    3,    7,
         6,    3,    2,    0,    1,    1,    1,    2,
         0,    7,    3,    2,    1,    0,    1,    1,
         1,    1,    1,    2,    1,    0,    3,    3);

   YY_Get_LHS_Rule : constant array (0 .. 119) of Integer :=
    (   -1,   -2,   -3,   -3,   -8,   -7,  -11,  -12,
       -12,   -9,   -9,  -10,  -10,   -4,   -4,   -4,
       -13,  -13,  -14,  -16,  -19,   -5,  -20,  -21,
        -5,   -5,  -15,  -15,  -17,  -18,  -18,  -22,
       -22,  -22,  -23,  -23,  -23,  -23,  -24,  -24,
       -24,  -24,  -24,  -27,  -28,  -28,  -28,  -25,
       -29,  -29,  -29,  -29,  -31,  -31,  -31,  -31,
       -31,  -31,  -31,  -31,  -32,  -33,  -35,  -35,
       -36,  -36,  -34,  -34,  -34,  -34,  -34,  -34,
       -34,  -34,  -34,  -34,  -34,  -34,  -30,  -30,
       -37,  -37,  -37,  -26,  -38,  -38,  -38,  -39,
       -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
       -39,  -41,  -41,  -41,  -40,  -40,  -40,  -40,
       -44,   -6,   -6,  -45,  -45,  -45,  -46,  -46,
       -46,  -46,  -46,  -43,  -43,  -43,  -47,  -42);

   YY_Shift_Reduce_Matrix : constant array (-1 .. 415) of Shift_Reduce_Entry :=
    ((   -1,    -1), (    2,     3), (   -1,    -3), (    3,     9),
     (   22,     7), (   -1,   -15), (   -1,    -2), (   27,    10),
     (   -1, -3000), (    0, -3001), (   -1, -3000), (    3,     9),
     (    6,    12), (   22,     7), (   -1,   -25), (   -1,   -14),
     (   -1,   -16), (   -1,   -17), (    4,    15), (   -1, -3000),
     (   24,    16), (   -1, -3000), (   -1, -3000), (   11,    17),
     (   12,    18), (   -1,   -22), (   23,    21), (   -1, -3000),
     (   -1,   -13), (   -1,   -18), (   20,    23), (   -1, -3000),
     (   13,    24), (   -1, -3000), (   14,    25), (   -1, -3000),
     (   -1,   -19), (    7,    33), (    8,    34), (   22,    32),
     (   40,    35), (   -1,   -33), (   10,    39), (   -1,  -117),
     (    3,     9), (   22,     7), (   -1,   -15), (   -1,    -4),
     (   -1,   -26), (   13,    42), (   -1, -3000), (    7,    33),
     (    8,    34), (   22,    32), (   40,    35), (   -1,   -33),
     (    7,    33), (    8,    34), (   22,    32), (   40,    35),
     (   -1,   -28), (   -1,   -32), (   -1,   -34), (   -1,   -35),
     (   -1,   -36), (   -1,   -37), (   10,    45), (   17,    46),
     (   -1, -3000), (   30,    47), (   31,    48), (   32,    51),
     (   -1, -3000), (   10,    57), (   -1,   -86), (   15,    58),
     (   -1,   -30), (    9,    60), (   10,    39), (   26,    61),
     (   -1, -3000), (   -1,  -116), (   24,    63), (   -1, -3000),
     (    3,     9), (   22,     7), (   -1,    -1), (   28,    64),
     (   -1,   -10), (   -1,   -27), (   15,    58), (   -1,   -30),
     (   -1,   -31), (   11,    17), (   12,    18), (   18,    67),
     (   -1, -3000), (   10,    70), (   -1, -3000), (   -1,   -48),
     (   -1,   -49), (   -1,   -50), (   -1,   -51), (   10,    71),
     (   32,    76), (   39,    77), (   -1, -3000), (   36,    78),
     (   37,    79), (   38,    80), (   -1,   -55), (   36,    81),
     (   37,    82), (   38,    83), (   -1,   -59), (    9,    84),
     (   -1, -3000), (    9,    85), (   10,    57), (   -1, -3000),
     (   -1,   -85), (   32,    96), (   41,    87), (   42,    88),
     (   43,    89), (   44,    90), (   45,    91), (   46,    92),
     (   47,    93), (   48,    94), (   49,    95), (   -1, -3000),
     (    7,    33), (    8,    34), (   22,    32), (   40,    35),
     (   -1,   -33), (    9,    98), (   -1, -3000), (   -1,  -104),
     (   -1,  -106), (   -1,  -115), (   18,   100), (   -1, -3000),
     (   24,   102), (   -1, -3000), (   29,   103), (   -1,   -12),
     (    9,   105), (   -1, -3000), (   20,   107), (   -1,   -46),
     (    9,   108), (   -1, -3000), (    9,   109), (   21,   110),
     (   -1, -3000), (   11,    17), (   12,    18), (   18,    67),
     (   -1, -3000), (   36,   113), (   37,   114), (   38,   115),
     (   -1,   -69), (   36,   116), (   37,   117), (   38,   118),
     (   -1,   -73), (   36,   119), (   37,   120), (   38,   121),
     (   -1,   -77), (   33,   122), (   35,   123), (   -1, -3000),
     (   34,   125), (   -1,   -65), (   10,    71), (   32,    76),
     (   -1, -3000), (   33,   128), (   34,   127), (   -1, -3000),
     (   -1,   -52), (   -1,   -53), (   -1,   -54), (   -1,   -56),
     (   -1,   -57), (   -1,   -58), (   -1,   -47), (   -1,   -83),
     (   -1,   -84), (   18,   100), (   50,   129), (   51,   130),
     (   52,   132), (   -1, -3000), (   18,   100), (   50,   129),
     (   51,   130), (   52,   132), (   -1, -3000), (   18,   100),
     (   50,   129), (   51,   130), (   52,   132), (   -1, -3000),
     (   18,   100), (   50,   129), (   51,   130), (   52,   132),
     (   -1, -3000), (   18,   100), (   50,   129), (   51,   130),
     (   52,   132), (   -1, -3000), (   18,   100), (   50,   129),
     (   51,   130), (   52,   132), (   -1, -3000), (   18,   100),
     (   50,   129), (   51,   130), (   52,   132), (   -1, -3000),
     (   18,   100), (   50,   129), (   51,   130), (   52,   132),
     (   -1, -3000), (   32,   141), (   -1, -3000), (   10,   142),
     (   -1, -3000), (    7,    33), (    8,    34), (   16,   143),
     (   22,    32), (   40,    35), (   -1, -3000), (   -1,   -23),
     (    2,   152), (    3,     9), (   20,   148), (   22,   149),
     (   23,    21), (   -1,  -109), (   20,   107), (   -1,   -46),
     (   -1,  -118), (   20,   154), (   -1, -3000), (   24,   155),
     (   -1, -3000), (    4,   156), (   -1, -3000), (   -1,   -20),
     (   19,   158), (   20,   159), (   -1, -3000), (   -1,   -45),
     (   -1,   -38), (   -1,   -39), (   10,   160), (   -1, -3000),
     (    9,   161), (   -1, -3000), (    9,   162), (   -1, -3000),
     (   -1,   -66), (   -1,   -67), (   -1,   -68), (   -1,   -70),
     (   -1,   -71), (   -1,   -72), (   -1,   -74), (   -1,   -75),
     (   -1,   -76), (   -1,   -61), (   10,    71), (   32,    76),
     (   -1, -3000), (   33,   164), (   34,   165), (   -1, -3000),
     (   10,    71), (   32,    76), (   -1, -3000), (   33,   167),
     (   34,   168), (   -1, -3000), (   10,   169), (   -1, -3000),
     (   -1,   -79), (   -1,  -100), (   -1,  -101), (   -1,  -102),
     (   18,   100), (   -1, -3000), (   -1,   -87), (   -1,   -88),
     (   -1,   -89), (   -1,   -90), (   -1,   -91), (   -1,   -92),
     (   -1,   -93), (   -1,   -94), (   10,   171), (   -1, -3000),
     (   34,   173), (   -1,   -99), (   -1,   -29), (    3,     9),
     (   22,     7), (   -1,   -15), (    2,   152), (    3,     9),
     (   20,   148), (   22,   149), (   23,    21), (   25,   175),
     (   -1, -3000), (   -1,  -108), (   -1,  -110), (   -1,  -111),
     (   -1,  -112), (   -1,  -113), (   -1,  -114), (   27,   177),
     (   -1,    -8), (   19,   179), (   20,   159), (   -1, -3000),
     (   -1,    -9), (   20,   180), (   -1, -3000), (   -1,    -5),
     (    3,     9), (   22,     7), (   -1,   -15), (   -1,   -43),
     (   -1,   -44), (    9,   182), (   -1, -3000), (   -1,   -41),
     (   -1,   -42), (   -1,   -64), (   -1,   -60), (   10,    71),
     (   32,    76), (   -1, -3000), (   -1,   -63), (   37,   184),
     (   -1, -3000), (   10,   185), (   -1, -3000), (   -1,   -81),
     (   -1,  -103), (   34,   173), (   -1,   -99), (   33,   187),
     (   34,   188), (   -1, -3000), (   10,   189), (   -1, -3000),
     (    3,     9), (   22,     7), (   -1,   -24), (    9,   190),
     (   -1, -3000), (   -1,  -107), (   24,   191), (   -1, -3000),
     (   28,   192), (   -1, -3000), (   -1,  -119), (   -1,   -11),
     (    3,     9), (   22,     7), (   -1,   -21), (   -1,   -40),
     (   -1,   -62), (   -1,   -78), (   -1,   -80), (   33,   193),
     (   34,   188), (   -1, -3000), (   18,   100), (   50,   129),
     (   51,   130), (   52,   132), (   -1, -3000), (   10,   195),
     (   -1, -3000), (   -1,   -98), (   -1,  -105), (   20,   196),
     (   -1, -3000), (   24,   197), (   -1, -3000), (   18,   100),
     (   50,   129), (   51,   130), (   52,   132), (   -1, -3000),
     (   -1,   -96), (   -1,   -97), (   -1,    -7), (   20,   199),
     (   -1, -3000), (   -1,   -95), (    4,   200), (   -1, -3000),
     (   -1,    -6));

   YY_Shift_Reduce_Offset : constant array (0 .. 200) of Integer :=
    (    0,    2,    5,    6,    8,   10,   14,   15,
        16,   17,   19,   21,   22,   25,   27,   28,
        29,   31,   33,   35,   36,   41,   43,   46,
        47,   48,   50,   55,   60,   61,   62,   63,
        64,   65,   68,   72,   74,   76,   80,   81,
        83,   86,   88,   89,   91,   92,   96,   98,
        99,  100,  101,  102,  106,  110,  114,  116,
       119,  120,  131,  136,  138,  139,  140,  141,
       143,  145,  147,  149,  151,  153,  156,  160,
       164,  168,  172,  175,  177,  180,  183,  184,
       185,  186,  187,  188,  189,  190,  191,  192,
       197,  202,  207,  212,  217,  222,  227,  232,
       234,  236,  242,  243,  249,  251,  252,  254,
       256,  258,  259,  262,  263,  264,  265,  267,
       269,  271,  272,  273,  274,  275,  276,  277,
       278,  279,  280,  281,  284,  287,  290,  293,
       295,  296,  297,  298,  299,  301,  302,  303,
       304,  305,  306,  307,  308,  309,  311,  313,
       314,  317,  324,  325,  326,  327,  328,  329,
       330,  332,  335,  336,  338,  339,  342,  343,
       344,  346,  347,  348,  349,  350,  353,  354,
       356,  358,  359,  360,  362,  365,  367,  370,
       372,  373,  375,  377,  378,  379,  382,  383,
       384,  385,  386,  389,  394,  396,  397,  398,
       400,  402,  407,  408,  409,  410,  412,  413,
       415);

end Matreshka.SAX.Simple_Readers.Parser.Tables;

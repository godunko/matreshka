------------------------------------------------------------------------------
--                                                                          --
--                            Matreshka Project                             --
--                                                                          --
--                              XML Processor                               --
--                                                                          --
--                        Runtime Library Component                         --
--                                                                          --
------------------------------------------------------------------------------
--                                                                          --
-- Copyright Â© 2010, Vadim Godunko <vgodunko@gmail.com>                     --
-- All rights reserved.                                                     --
--                                                                          --
-- Redistribution and use in source and binary forms, with or without       --
-- modification, are permitted provided that the following conditions       --
-- are met:                                                                 --
--                                                                          --
--  * Redistributions of source code must retain the above copyright        --
--    notice, this list of conditions and the following disclaimer.         --
--                                                                          --
--  * Redistributions in binary form must reproduce the above copyright     --
--    notice, this list of conditions and the following disclaimer in the   --
--    documentation and/or other materials provided with the distribution.  --
--                                                                          --
--  * Neither the name of the Vadim Godunko, IE nor the names of its        --
--    contributors may be used to endorse or promote products derived from  --
--    this software without specific prior written permission.              --
--                                                                          --
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS      --
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT        --
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    --
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     --
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   --
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED --
-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   --
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   --
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     --
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       --
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             --
--                                                                          --
------------------------------------------------------------------------------
--  $Revision$ $Date$
------------------------------------------------------------------------------

private package XML.SAX.Simple_Readers.Parser.Tables is

   pragma Preelaborate;

   type Goto_Entry is record
      Nonterm  : Integer;
      Newstate : Integer;
   end record;

   type Shift_Reduce_Entry is record
      T   : Integer;
      Act : Integer;
   end record;

   YY_Default           : constant :=    -1;
   YY_First_Shift_Entry : constant :=     0;
   YY_Accept_Code       : constant := -3001;
   YY_Error_Code        : constant := -3000;

   YY_Goto_Matrix : constant array (-1 .. 136) of Goto_Entry :=
    ((   -1,    -1), (   -9,     2), (   -3,     1), (   -2,     4),
     (   -4,     5), (  -15,    12), (  -14,    10), (   -6,     8),
     (   -5,    14), (  -15,    12), (  -14,    18), (   -7,    17),
     (  -18,    25), (  -16,    24), (   -8,    27), (  -10,    28),
     (  -28,    36), (  -27,    35), (  -26,    34), (  -25,    33),
     (  -24,    32), (  -23,    31), (  -15,    38), (  -13,    39),
     (  -17,    45), (  -45,    47), (  -15,    12), (  -14,    10),
     (   -6,    49), (  -11,    51), (  -28,    36), (  -27,    35),
     (  -26,    34), (  -25,    33), (  -24,    54), (  -15,    38),
     (  -13,    39), (  -35,    63), (  -34,    62), (  -33,    60),
     (  -32,    59), (  -31,    64), (  -41,    66), (  -40,    65),
     (  -18,    72), (  -22,    73), (  -15,    12), (  -14,    18),
     (  -12,    80), (  -29,    82), (  -16,    83), (  -38,    88),
     (  -36,    89), (  -35,    87), (  -34,    86), (  -41,   100),
     (  -19,   115), (  -15,    12), (  -14,    10), (   -6,   116),
     (  -46,   117), (  -44,   120), (  -30,   124), (  -29,   129),
     (  -16,   130), (  -37,   142), (  -38,    88), (  -36,    89),
     (  -35,    87), (  -34,    86), (  -39,   144), (  -44,   149),
     (  -42,   151), (  -44,   149), (  -42,   152), (  -44,   149),
     (  -42,   153), (  -44,   149), (  -42,   154), (  -44,   149),
     (  -42,   155), (  -44,   149), (  -42,   156), (  -44,   149),
     (  -42,   157), (  -44,   149), (  -42,   158), (  -28,    36),
     (  -27,    35), (  -26,    34), (  -25,    33), (  -24,    32),
     (  -23,   166), (  -20,   167), (  -15,    38), (  -13,    39),
     (  -15,    12), (  -14,    18), (  -48,   169), (  -47,   168),
     (  -15,   173), (  -13,   174), (   -8,   170), (  -44,   175),
     (  -30,   176), (  -36,   183), (  -35,    87), (  -34,    86),
     (  -36,   186), (  -35,    87), (  -34,    86), (  -44,   190),
     (  -43,   192), (  -28,    36), (  -27,    35), (  -26,    34),
     (  -25,    33), (  -24,    54), (  -15,    38), (  -13,    39),
     (  -48,   199), (  -15,   173), (  -13,   174), (   -8,   170),
     (  -36,   202), (  -35,    87), (  -34,    86), (  -43,   205),
     (  -21,   210), (  -44,   149), (  -42,   213), (  -15,    12),
     (  -14,    10), (   -6,   216), (  -44,   149), (  -42,   217),
     (  -15,    12), (  -14,    18));

   YY_Goto_Offset : constant array (0 .. 218) of Integer :=
    (    0,    3,    4,    4,    4,    4,    8,    8,
         8,   11,   11,   11,   11,   11,   11,   11,
        11,   13,   14,   14,   14,   15,   15,   15,
        23,   24,   24,   25,   28,   29,   29,   29,
        36,   36,   36,   36,   36,   36,   36,   36,
        36,   36,   41,   43,   43,   43,   44,   45,
        45,   45,   47,   47,   48,   48,   48,   48,
        50,   50,   50,   50,   50,   50,   54,   54,
        54,   54,   55,   55,   55,   55,   55,   55,
        55,   56,   59,   60,   60,   60,   61,   61,
        61,   61,   62,   62,   62,   64,   64,   64,
        64,   64,   65,   69,   70,   70,   70,   70,
        70,   70,   70,   70,   70,   70,   72,   74,
        76,   78,   80,   82,   84,   86,   86,   86,
        86,   86,   86,   86,   95,   97,  102,  103,
       104,  104,  104,  104,  104,  104,  104,  104,
       104,  104,  104,  104,  104,  104,  104,  104,
       104,  104,  104,  104,  104,  104,  107,  107,
       110,  110,  110,  110,  110,  110,  110,  111,
       111,  111,  111,  111,  111,  111,  111,  111,
       111,  112,  112,  112,  112,  112,  112,  119,
       119,  123,  123,  123,  123,  123,  123,  123,
       123,  123,  123,  123,  123,  123,  123,  123,
       123,  123,  126,  126,  126,  126,  126,  126,
       127,  127,  127,  127,  127,  127,  128,  128,
       128,  128,  128,  128,  128,  128,  128,  130,
       130,  130,  130,  133,  133,  135,  135,  135,
       135,  137,  137);

   YY_Rule_Length : constant array (0 .. 126) of Integer :=
    (    2,    0,    3,    4,    1,    1,    0,    0,
         8,    8,    5,    3,    0,    3,    0,    2,
         1,    0,    1,    1,    2,    0,    0,    0,
         9,    0,    5,    0,    2,    3,    1,    3,
         0,    2,    1,    0,    1,    1,    1,    1,
         1,    1,    1,    4,    4,    5,    4,    4,
         6,    5,    5,    3,    2,    1,    0,    3,
         1,    1,    1,    1,    2,    2,    2,    1,
         2,    2,    2,    1,    4,    3,    3,    2,
         3,    1,    2,    2,    2,    1,    2,    2,
         2,    1,    2,    2,    2,    1,    5,    3,
         3,    2,    0,    3,    2,    1,    0,    3,
         3,    3,    3,    3,    3,    3,    3,    7,
         6,    3,    2,    0,    1,    1,    1,    2,
         0,    7,    3,    2,    1,    0,    1,    1,
         1,    1,    1,    4,    3,    0,    3);

   YY_Get_LHS_Rule : constant array (0 .. 126) of Integer :=
    (   -1,   -4,   -2,   -5,   -5,   -3,   -3,  -10,
        -9,  -13,  -13,  -11,  -11,  -12,  -12,   -6,
        -6,   -6,  -14,  -14,  -15,  -17,  -19,  -21,
        -7,  -22,   -7,   -7,  -16,  -16,  -20,  -18,
       -18,  -23,  -23,  -23,  -24,  -24,  -24,  -24,
       -24,  -24,  -24,  -28,  -28,  -28,  -25,  -25,
       -25,  -25,  -25,  -29,  -30,  -30,  -30,  -26,
       -31,  -31,  -31,  -31,  -33,  -33,  -33,  -33,
       -33,  -33,  -33,  -33,  -34,  -35,  -37,  -37,
       -38,  -38,  -36,  -36,  -36,  -36,  -36,  -36,
       -36,  -36,  -36,  -36,  -36,  -36,  -32,  -32,
       -39,  -39,  -39,  -27,  -40,  -40,  -40,  -41,
       -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
       -41,  -43,  -43,  -43,  -42,  -42,  -42,  -42,
       -46,   -8,   -8,  -47,  -47,  -47,  -48,  -48,
       -48,  -48,  -48,  -45,  -45,  -45,  -44);

   YY_Shift_Reduce_Matrix : constant array (-1 .. 456) of Shift_Reduce_Entry :=
    ((   -1,    -1), (    2,     3), (   -1,    -6), (   -1,    -1),
     (   -1,    -5), (   28,     6), (   -1, -3000), (    0, -3001),
     (   -1, -3000), (    1,     9), (    3,    13), (   23,    11),
     (   -1,   -17), (   25,    15), (   -1, -3000), (   -1, -3000),
     (    3,    13), (    6,    16), (   23,    11), (   -1,   -27),
     (   -1,    -4), (   -1,   -16), (   -1,   -18), (   -1,   -19),
     (    4,    19), (   -1, -3000), (   -1,    -2), (   21,    20),
     (   -1, -3000), (   12,    21), (   13,    22), (   16,    23),
     (   -1,   -32), (   24,    26), (   -1, -3000), (   -1,   -15),
     (   -1,   -20), (   -1,    -7), (   14,    29), (   -1, -3000),
     (   15,    30), (   -1, -3000), (    2,    44), (    3,    13),
     (    7,    40), (    8,    41), (    9,    43), (   23,    37),
     (   41,    42), (   -1,   -35), (   -1,   -21), (   10,    46),
     (   -1, -3000), (   11,    48), (   -1,  -125), (    3,    13),
     (   23,    11), (   -1,   -17), (   29,    50), (   -1,   -12),
     (   -1,   -28), (   14,    52), (   -1, -3000), (    2,    44),
     (    3,    13), (    7,    40), (    8,    41), (    9,    43),
     (   17,    53), (   23,    37), (   41,    42), (   -1, -3000),
     (   -1,   -34), (   -1,   -36), (   -1,   -37), (   -1,   -38),
     (   -1,   -39), (   -1,   -40), (   -1,   -41), (   -1,   -42),
     (   11,    55), (   18,    56), (   -1, -3000), (   31,    57),
     (   32,    58), (   33,    61), (   -1, -3000), (   11,    67),
     (   -1,   -94), (   12,    68), (   13,    69), (   -1, -3000),
     (   28,    70), (   29,    71), (   -1, -3000), (   16,    23),
     (   -1,   -32), (   -1,   -25), (   10,    74), (   11,    76),
     (   27,    75), (   -1, -3000), (   25,    77), (   -1, -3000),
     (    3,    13), (   23,    11), (   -1,    -3), (   25,    78),
     (   -1, -3000), (   30,    79), (   -1,   -14), (   -1,   -29),
     (   -1,   -31), (   -1,   -33), (   12,    21), (   13,    22),
     (   19,    81), (   -1, -3000), (   11,    84), (   -1, -3000),
     (   -1,   -56), (   -1,   -57), (   -1,   -58), (   -1,   -59),
     (   11,    85), (   33,    90), (   40,    91), (   -1, -3000),
     (   37,    92), (   38,    93), (   39,    94), (   -1,   -63),
     (   37,    95), (   38,    96), (   39,    97), (   -1,   -67),
     (   10,    98), (   -1, -3000), (   10,    99), (   11,    67),
     (   -1, -3000), (   -1,   -93), (   33,   110), (   42,   101),
     (   43,   102), (   44,   103), (   45,   104), (   46,   105),
     (   47,   106), (   48,   107), (   49,   108), (   50,   109),
     (   -1, -3000), (   14,   111), (   -1, -3000), (   15,   112),
     (   -1, -3000), (   25,   113), (   -1, -3000), (   25,   114),
     (   -1, -3000), (   -1,   -22), (    3,    13), (   23,    11),
     (   -1,   -17), (   -1,  -112), (   -1,  -114), (   25,   118),
     (   -1, -3000), (   19,   119), (   -1, -3000), (   21,   121),
     (   -1, -3000), (   25,   122), (   -1, -3000), (    4,   123),
     (   -1, -3000), (   21,   125), (   -1,   -54), (   10,   126),
     (   -1, -3000), (   10,   127), (   22,   128), (   -1, -3000),
     (   12,    21), (   13,    22), (   19,    81), (   -1, -3000),
     (   37,   131), (   38,   132), (   39,   133), (   -1,   -77),
     (   37,   134), (   38,   135), (   39,   136), (   -1,   -81),
     (   37,   137), (   38,   138), (   39,   139), (   -1,   -85),
     (   34,   140), (   36,   141), (   -1, -3000), (   35,   143),
     (   -1,   -73), (   11,    85), (   33,    90), (   -1, -3000),
     (   34,   146), (   35,   145), (   -1, -3000), (   -1,   -60),
     (   -1,   -61), (   -1,   -62), (   -1,   -64), (   -1,   -65),
     (   -1,   -66), (   -1,   -55), (   -1,   -91), (   -1,   -92),
     (   19,   119), (   51,   147), (   52,   148), (   53,   150),
     (   -1, -3000), (   19,   119), (   51,   147), (   52,   148),
     (   53,   150), (   -1, -3000), (   19,   119), (   51,   147),
     (   52,   148), (   53,   150), (   -1, -3000), (   19,   119),
     (   51,   147), (   52,   148), (   53,   150), (   -1, -3000),
     (   19,   119), (   51,   147), (   52,   148), (   53,   150),
     (   -1, -3000), (   19,   119), (   51,   147), (   52,   148),
     (   53,   150), (   -1, -3000), (   19,   119), (   51,   147),
     (   52,   148), (   53,   150), (   -1, -3000), (   19,   119),
     (   51,   147), (   52,   148), (   53,   150), (   -1, -3000),
     (   33,   159), (   -1, -3000), (   11,   160), (   -1, -3000),
     (   10,   161), (   -1, -3000), (   10,   162), (   14,   163),
     (   -1, -3000), (   21,   164), (   -1, -3000), (   21,   165),
     (   -1, -3000), (    2,    44), (    3,    13), (    7,    40),
     (    8,    41), (    9,    43), (   23,    37), (   41,    42),
     (   -1,   -35), (    3,    13), (   23,    11), (   -1,   -26),
     (    2,    44), (    3,    13), (   21,   171), (   23,   172),
     (   24,    26), (   -1,  -117), (   19,   119), (   -1, -3000),
     (   21,   125), (   -1,   -54), (   -1,  -124), (   -1,   -11),
     (   21,   177), (   -1, -3000), (   -1,    -8), (   20,   178),
     (   21,   179), (   -1, -3000), (   -1,   -53), (   -1,   -46),
     (   -1,   -47), (   11,   180), (   -1, -3000), (   10,   181),
     (   -1, -3000), (   10,   182), (   -1, -3000), (   -1,   -74),
     (   -1,   -75), (   -1,   -76), (   -1,   -78), (   -1,   -79),
     (   -1,   -80), (   -1,   -82), (   -1,   -83), (   -1,   -84),
     (   -1,   -69), (   11,    85), (   33,    90), (   -1, -3000),
     (   34,   184), (   35,   185), (   -1, -3000), (   11,    85),
     (   33,    90), (   -1, -3000), (   34,   187), (   35,   188),
     (   -1, -3000), (   11,   189), (   -1, -3000), (   -1,   -87),
     (   -1,  -108), (   -1,  -109), (   -1,  -110), (   19,   119),
     (   -1, -3000), (   -1,   -95), (   -1,   -96), (   -1,   -97),
     (   -1,   -98), (   -1,   -99), (   -1,  -100), (   -1,  -101),
     (   -1,  -102), (   11,   191), (   -1, -3000), (   35,   193),
     (   -1,  -107), (   -1,   -43), (   -1,   -44), (   10,   194),
     (   -1, -3000), (   29,   195), (   -1, -3000), (    4,   196),
     (   -1, -3000), (    2,    44), (    3,    13), (    7,    40),
     (    8,    41), (    9,    43), (   23,    37), (   41,    42),
     (   -1,   -30), (   10,   197), (   -1, -3000), (    2,    44),
     (    3,    13), (   21,   171), (   23,   172), (   24,    26),
     (   26,   198), (   -1, -3000), (   -1,  -116), (   -1,  -118),
     (   -1,  -119), (   -1,  -120), (   -1,  -121), (   -1,  -122),
     (   -1,  -123), (   20,   200), (   21,   179), (   -1, -3000),
     (   -1,   -13), (   -1,   -51), (   -1,   -52), (   10,   201),
     (   -1, -3000), (   -1,   -49), (   -1,   -50), (   -1,   -72),
     (   -1,   -68), (   11,    85), (   33,    90), (   -1, -3000),
     (   -1,   -71), (   38,   203), (   -1, -3000), (   11,   204),
     (   -1, -3000), (   -1,   -89), (   -1,  -111), (   35,   193),
     (   -1,  -107), (   34,   206), (   35,   207), (   -1, -3000),
     (   11,   208), (   -1, -3000), (   -1,   -45), (   25,   209),
     (   -1, -3000), (   -1,   -10), (   -1,   -23), (   10,   211),
     (   -1, -3000), (   -1,  -115), (   -1,  -126), (   -1,   -48),
     (   -1,   -70), (   -1,   -86), (   -1,   -88), (   34,   212),
     (   35,   207), (   -1, -3000), (   19,   119), (   51,   147),
     (   52,   148), (   53,   150), (   -1, -3000), (   11,   214),
     (   -1, -3000), (   -1,  -106), (   21,   215), (   -1, -3000),
     (    3,    13), (   23,    11), (   -1,   -17), (   -1,  -113),
     (   19,   119), (   51,   147), (   52,   148), (   53,   150),
     (   -1, -3000), (   -1,  -104), (   -1,  -105), (    4,   218),
     (   -1, -3000), (    3,    13), (   23,    11), (   -1,   -24),
     (   -1,  -103), (   -1,    -9));

   YY_Shift_Reduce_Offset : constant array (0 .. 218) of Integer :=
    (    0,    2,    3,    4,    6,    8,   12,   14,
        15,   19,   20,   21,   22,   23,   25,   26,
        28,   32,   34,   35,   36,   37,   39,   41,
        49,   50,   52,   54,   57,   59,   60,   62,
        71,   72,   73,   74,   75,   76,   77,   78,
        79,   82,   86,   88,   91,   94,   96,   97,
       101,  103,  106,  108,  110,  111,  112,  113,
       117,  119,  120,  121,  122,  123,  127,  131,
       135,  137,  140,  141,  152,  154,  156,  158,
       160,  161,  164,  165,  166,  168,  170,  172,
       174,  176,  178,  180,  183,  187,  191,  195,
       199,  202,  204,  207,  210,  211,  212,  213,
       214,  215,  216,  217,  218,  219,  224,  229,
       234,  239,  244,  249,  254,  259,  261,  263,
       265,  268,  270,  272,  280,  283,  289,  291,
       293,  294,  295,  297,  298,  301,  302,  303,
       304,  306,  308,  310,  311,  312,  313,  314,
       315,  316,  317,  318,  319,  320,  323,  326,
       329,  332,  334,  335,  336,  337,  338,  340,
       341,  342,  343,  344,  345,  346,  347,  348,
       350,  352,  353,  354,  356,  358,  360,  368,
       370,  377,  378,  379,  380,  381,  382,  383,
       384,  387,  388,  389,  390,  392,  393,  394,
       395,  396,  399,  400,  402,  404,  405,  406,
       408,  411,  413,  414,  416,  417,  418,  420,
       421,  422,  423,  424,  425,  426,  429,  434,
       436,  437,  439,  442,  443,  448,  449,  450,
       452,  455,  456);

end XML.SAX.Simple_Readers.Parser.Tables;

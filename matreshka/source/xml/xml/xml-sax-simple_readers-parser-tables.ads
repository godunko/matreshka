------------------------------------------------------------------------------
--                                                                          --
--                            Matreshka Project                             --
--                                                                          --
--                              XML Processor                               --
--                                                                          --
--                        Runtime Library Component                         --
--                                                                          --
------------------------------------------------------------------------------
--                                                                          --
-- Copyright Â© 2010, Vadim Godunko <vgodunko@gmail.com>                     --
-- All rights reserved.                                                     --
--                                                                          --
-- Redistribution and use in source and binary forms, with or without       --
-- modification, are permitted provided that the following conditions       --
-- are met:                                                                 --
--                                                                          --
--  * Redistributions of source code must retain the above copyright        --
--    notice, this list of conditions and the following disclaimer.         --
--                                                                          --
--  * Redistributions in binary form must reproduce the above copyright     --
--    notice, this list of conditions and the following disclaimer in the   --
--    documentation and/or other materials provided with the distribution.  --
--                                                                          --
--  * Neither the name of the Vadim Godunko, IE nor the names of its        --
--    contributors may be used to endorse or promote products derived from  --
--    this software without specific prior written permission.              --
--                                                                          --
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS      --
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT        --
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    --
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     --
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   --
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED --
-- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   --
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   --
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     --
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       --
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             --
--                                                                          --
------------------------------------------------------------------------------
--  $Revision$ $Date$
------------------------------------------------------------------------------
pragma Style_Checks ("-t");
--  GNAT: Disable check for token separation rules, because format of the
--  tables is not compatible with them.

private package XML.SAX.Simple_Readers.Parser.Tables is

   pragma Preelaborate;

   type Goto_Entry is record
      Nonterm  : Integer;
      Newstate : Integer;
   end record;

   type Shift_Reduce_Entry is record
      T   : Integer;
      Act : Integer;
   end record;

   YY_Default           : constant :=    -1;
   YY_First_Shift_Entry : constant :=     0;
   YY_Accept_Code       : constant := -3001;
   YY_Error_Code        : constant := -3000;

   YY_Goto_Matrix : constant array (-1 .. 175) of Goto_Entry :=
    ((   -1,    -1), (   -3,     1), (   -2,     2), (  -13,     9),
     (  -12,     7), (   -7,     6), (   -6,     4), (   -5,     3),
     (   -4,    11), (  -13,     9), (  -12,     7), (   -7,     6),
     (   -6,    13), (  -13,     9), (  -12,    17), (   -8,    16),
     (  -19,    23), (  -14,    22), (   -9,    25), (  -15,    29),
     (  -16,    31), (  -54,    32), (  -13,     9), (  -12,     7),
     (   -7,    33), (  -10,    36), (  -16,    38), (  -26,    44),
     (  -25,    43), (  -24,    42), (  -23,    41), (  -22,    40),
     (  -21,    39), (  -13,    46), (  -11,    47), (  -56,    56),
     (  -55,    58), (  -13,     9), (  -12,    17), (  -26,    44),
     (  -25,    43), (  -24,    42), (  -23,    41), (  -22,    40),
     (  -21,    62), (  -17,    63), (  -13,    46), (  -11,    47),
     (  -26,    44), (  -25,    43), (  -24,    42), (  -23,    41),
     (  -22,    65), (  -13,    46), (  -11,    47), (  -26,    44),
     (  -25,    43), (  -24,    42), (  -23,    41), (  -22,    40),
     (  -21,    62), (  -17,    66), (  -13,    46), (  -11,    47),
     (  -26,    44), (  -25,    43), (  -24,    42), (  -23,    41),
     (  -22,    40), (  -21,    67), (  -13,    46), (  -11,    47),
     (  -20,    76), (  -62,    80), (  -26,    44), (  -25,    43),
     (  -24,    42), (  -23,    41), (  -22,    65), (  -13,    46),
     (  -11,    47), (  -26,    44), (  -25,    43), (  -24,    42),
     (  -23,    41), (  -22,    65), (  -13,    46), (  -11,    47),
     (  -27,    87), (  -14,    88), (  -29,    90), (  -39,    91),
     (  -13,     9), (  -12,     7), (   -7,    96), (  -57,    97),
     (  -61,    98), (  -10,   100), (  -18,   101), (  -28,   102),
     (  -27,   107), (  -14,   108), (  -34,   115), (  -33,   114),
     (  -32,   112), (  -31,   111), (  -30,   116), (  -41,   118),
     (  -40,   117), (  -13,     9), (  -12,    17), (  -59,   126),
     (  -58,   125), (  -13,   131), (  -11,   132), (   -9,   127),
     (  -13,     9), (  -12,     7), (   -7,   137), (  -37,   146),
     (  -35,   147), (  -34,   145), (  -33,   144), (  -41,   158),
     (  -53,   168), (  -59,   173), (  -13,   131), (  -11,   132),
     (   -9,   127), (  -59,   126), (  -58,   176), (  -13,   131),
     (  -11,   132), (   -9,   127), (  -13,     9), (  -12,    17),
     (  -36,   190), (  -37,   146), (  -35,   147), (  -34,   145),
     (  -33,   144), (  -38,   192), (  -42,   194), (  -44,   195),
     (  -45,   196), (  -46,   197), (  -47,   198), (  -48,   199),
     (  -49,   200), (  -50,   201), (  -51,   202), (  -60,   206),
     (  -59,   173), (  -13,   131), (  -11,   132), (   -9,   127),
     (  -35,   208), (  -34,   145), (  -33,   144), (  -35,   211),
     (  -34,   145), (  -33,   144), (  -43,   219), (  -43,   220),
     (  -43,   221), (  -43,   222), (  -43,   223), (  -43,   224),
     (  -43,   225), (  -43,   226), (  -52,   228), (  -35,   241),
     (  -34,   145), (  -33,   144), (  -52,   245), (  -43,   250),
     (  -43,   261));

   YY_Goto_Offset : constant array (0 .. 261) of Integer :=
    (    0,    2,    8,    8,   12,   12,   12,   15,
        15,   15,   15,   15,   15,   15,   15,   15,
        17,   18,   18,   18,   18,   18,   18,   19,
        20,   21,   24,   25,   25,   25,   26,   34,
        34,   36,   38,   38,   38,   38,   38,   47,
        54,   54,   54,   54,   54,   54,   54,   54,
        54,   63,   71,   71,   71,   71,   71,   71,
        72,   72,   73,   73,   73,   73,   73,   80,
        80,   80,   80,   80,   87,   89,   89,   90,
        91,   91,   91,   91,   91,   94,   95,   95,
        96,   96,   96,   97,   98,   98,   98,   99,
        99,   99,  101,  106,  108,  108,  108,  108,
       108,  110,  115,  115,  115,  115,  118,  118,
       118,  118,  118,  118,  118,  118,  118,  118,
       118,  118,  122,  122,  122,  122,  123,  123,
       124,  124,  124,  124,  124,  124,  128,  128,
       128,  128,  128,  128,  128,  128,  133,  133,
       133,  133,  135,  135,  135,  135,  135,  135,
       135,  135,  135,  135,  136,  140,  141,  141,
       141,  141,  141,  141,  141,  141,  141,  141,
       142,  143,  144,  145,  146,  147,  148,  149,
       150,  150,  150,  150,  150,  150,  150,  151,
       151,  155,  155,  155,  155,  155,  155,  155,
       155,  155,  155,  155,  155,  155,  158,  158,
       161,  161,  161,  162,  163,  164,  165,  166,
       167,  168,  169,  169,  170,  170,  170,  170,
       170,  170,  170,  173,  173,  173,  173,  173,
       173,  173,  173,  173,  173,  173,  173,  173,
       173,  173,  173,  173,  174,  174,  174,  174,
       174,  174,  174,  174,  174,  174,  174,  174,
       174,  174,  174,  174,  174,  174,  174,  175,
       175,  175,  176,  176,  176,  176,  176,  176,
       176,  176,  176,  176,  176,  176);

   YY_Rule_Length : constant array (0 .. 161) of Integer :=
    (    2,    0,    2,    2,    1,    4,    9,    6,
         8,    5,    3,    0,    2,    1,    0,    1,
         1,    2,    0,    0,    8,    0,    0,    6,
         0,    2,    3,    1,    3,    0,    2,    1,
         0,    1,    1,    1,    1,    1,    1,    1,
         3,    3,    4,    4,    5,    4,    4,    6,
         5,    5,    3,    2,    1,    0,    0,    5,
         1,    1,    1,    1,    2,    2,    2,    1,
         2,    2,    2,    1,    4,    3,    3,    2,
         3,    1,    2,    2,    2,    1,    2,    2,
         2,    1,    2,    2,    2,    1,    5,    4,
         3,    2,    0,    0,    5,    2,    1,    0,
         0,    4,    0,    4,    0,    4,    0,    4,
         0,    4,    0,    4,    0,    4,    0,    4,
         0,    7,    0,    6,    3,    3,    3,    3,
         3,    3,    3,    3,    3,    3,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    2,    1,    0,    3,    0,    6,
         2,    2,    1,    0,    1,    1,    0,    4,
         2,    1,    1,    1,    3,    0,    5,    0,
         4,    0);

   YY_Get_LHS_Rule : constant array (0 .. 161) of Integer :=
    (   -1,   -3,   -2,   -4,   -4,   -6,   -5,   -5,
       -11,  -11,  -10,  -10,   -7,   -7,   -7,  -12,
       -12,  -13,  -15,  -18,   -8,  -19,  -20,   -8,
        -8,  -14,  -14,  -17,  -16,  -16,  -21,  -21,
       -21,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
       -22,  -22,  -26,  -26,  -26,  -23,  -23,  -23,
       -23,  -23,  -27,  -28,  -28,  -28,  -29,  -24,
       -30,  -30,  -30,  -30,  -32,  -32,  -32,  -32,
       -32,  -32,  -32,  -32,  -33,  -34,  -36,  -36,
       -37,  -37,  -35,  -35,  -35,  -35,  -35,  -35,
       -35,  -35,  -35,  -35,  -35,  -35,  -31,  -31,
       -38,  -38,  -38,  -39,  -25,  -40,  -40,  -40,
       -42,  -41,  -44,  -41,  -45,  -41,  -46,  -41,
       -47,  -41,  -48,  -41,  -49,  -41,  -50,  -41,
       -51,  -41,  -53,  -41,  -52,  -52,  -52,  -52,
       -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
       -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
       -43,  -43,  -43,  -43,  -54,   -9,  -57,  -55,
       -55,  -58,  -58,  -58,  -59,  -59,  -60,  -59,
       -59,  -59,  -59,  -59,  -59,  -61,  -56,  -62,
       -56,  -56);

   YY_Shift_Reduce_Matrix : constant array (-1 .. 583) of Shift_Reduce_Entry :=
    ((   -1,    -1), (   -1,    -1), (    3,     5), (    4,    10),
     (   24,     8), (   -1,   -14), (    0, -3001), (   -1, -3000),
     (    4,    10), (   24,     8), (   -1,   -14), (   -1,    -4),
     (   29,    14), (   -1, -3000), (    4,    10), (    7,    15),
     (   24,     8), (   -1,   -24), (   -1,   -13), (   -1,   -15),
     (   -1,   -16), (    5,    18), (   -1, -3000), (   -1,    -2),
     (   -1, -3000), (   -1,    -3), (   26,    19), (   -1, -3000),
     (   13,    20), (   14,    21), (   -1,   -21), (   25,    24),
     (   -1, -3000), (   -1,   -12), (   -1,   -17), (   22,    26),
     (   -1, -3000), (   15,    27), (   -1, -3000), (   16,    28),
     (   -1, -3000), (   -1,   -18), (   17,    30), (   -1,   -29),
     (   -1,  -140), (    4,    10), (   24,     8), (   -1,   -14),
     (   30,    35), (   31,    34), (   -1,   -11), (   -1,   -25),
     (   15,    37), (   -1, -3000), (   17,    30), (   -1,   -29),
     (    3,    54), (    4,    10), (    8,    50), (    9,    51),
     (   10,    53), (   24,    45), (   42,    52), (   55,    49),
     (   57,    48), (   -1,   -32), (   11,    55), (   -1, -3000),
     (   12,    57), (   -1,  -161), (    4,    10), (   24,     8),
     (   -1,    -5), (   26,    59), (   -1, -3000), (   26,    60),
     (   -1, -3000), (    5,    61), (   -1, -3000), (   -1,   -26),
     (    3,    54), (    4,    10), (    8,    50), (    9,    51),
     (   10,    53), (   24,    45), (   42,    52), (   55,    49),
     (   57,    48), (   -1,   -32), (    3,    54), (    4,    10),
     (    8,    50), (    9,    51), (   10,    53), (   18,    64),
     (   24,    45), (   42,    52), (   55,    49), (   57,    48),
     (   -1, -3000), (   -1,   -31), (   -1,   -33), (   -1,   -34),
     (   -1,   -35), (   -1,   -36), (   -1,   -37), (   -1,   -38),
     (   -1,   -39), (    3,    54), (    4,    10), (    8,    50),
     (    9,    51), (   10,    53), (   24,    45), (   42,    52),
     (   55,    49), (   57,    48), (   -1,   -32), (    3,    54),
     (    4,    10), (    8,    50), (    9,    51), (   10,    53),
     (   24,    45), (   42,    52), (   55,    49), (   57,    48),
     (   -1,   -32), (   12,    68), (   19,    69), (   -1, -3000),
     (   12,    70), (   -1, -3000), (   12,    71), (   -1, -3000),
     (   13,    72), (   14,    73), (   -1, -3000), (   29,    74),
     (   30,    75), (   -1, -3000), (   -1,   -22), (   11,    77),
     (   12,    79), (   28,    78), (   -1, -3000), (   -1,  -159),
     (   -1,  -141), (   22,    81), (   -1, -3000), (   22,    82),
     (   -1, -3000), (   -1,    -7), (    3,    54), (    4,    10),
     (    8,    50), (    9,    51), (   10,    53), (   24,    45),
     (   42,    52), (   55,    49), (   57,    48), (   -1,   -27),
     (   11,    83), (   -1, -3000), (   -1,   -28), (   -1,   -30),
     (   58,    84), (   -1, -3000), (    3,    54), (    4,    10),
     (    8,    50), (    9,    51), (   10,    53), (   24,    45),
     (   42,    52), (   55,    49), (   56,    85), (   57,    48),
     (   -1, -3000), (   13,    20), (   14,    21), (   20,    86),
     (   -1, -3000), (   12,    89), (   -1, -3000), (   -1,   -54),
     (   -1,   -91), (   15,    92), (   -1, -3000), (   16,    93),
     (   -1, -3000), (   26,    94), (   -1, -3000), (   26,    95),
     (   -1, -3000), (    4,    10), (   24,     8), (   -1,   -14),
     (   -1,  -142), (   -1,  -144), (   -1,  -157), (   26,    99),
     (   -1, -3000), (   -1,   -10), (   31,    34), (   -1,   -11),
     (   -1,   -19), (   -1,   -40), (   -1,   -41), (   22,   103),
     (   -1,   -53), (   11,   104), (   -1, -3000), (   11,   105),
     (   23,   106), (   -1, -3000), (   13,    20), (   14,    21),
     (   20,    86), (   -1, -3000), (   32,   109), (   33,   110),
     (   34,   113), (   -1, -3000), (   12,   119), (   -1,   -95),
     (   11,   120), (   -1, -3000), (   11,   121), (   15,   122),
     (   -1, -3000), (   22,   123), (   -1, -3000), (   22,   124),
     (   -1, -3000), (    4,    10), (   24,     8), (   -1,   -23),
     (    3,    54), (    4,    10), (   22,   128), (   24,   130),
     (   25,    24), (   55,   133), (   59,   129), (   -1,  -147),
     (   26,   134), (   -1, -3000), (   22,   135), (   -1, -3000),
     (    5,   136), (   -1, -3000), (    4,    10), (   24,     8),
     (   -1,   -14), (   21,   138), (   22,   139), (   -1, -3000),
     (   -1,   -52), (   -1,   -45), (   -1,   -46), (   12,   140),
     (   -1, -3000), (   11,   141), (   -1, -3000), (   11,   142),
     (   -1, -3000), (   -1,   -56), (   -1,   -57), (   -1,   -58),
     (   -1,   -59), (   12,   143), (   34,   148), (   41,   149),
     (   -1, -3000), (   38,   150), (   39,   151), (   40,   152),
     (   -1,   -63), (   38,   153), (   39,   154), (   40,   155),
     (   -1,   -67), (   11,   156), (   -1, -3000), (   11,   157),
     (   12,   119), (   -1, -3000), (   -1,   -94), (   43,   159),
     (   44,   160), (   45,   161), (   46,   162), (   47,   163),
     (   48,   164), (   49,   165), (   50,   166), (   51,   167),
     (   -1,  -114), (   -1,   -42), (   -1,   -43), (   11,   169),
     (   -1, -3000), (   30,   170), (   -1, -3000), (    5,   171),
     (   -1, -3000), (    3,    54), (    4,    10), (   22,   128),
     (   24,   130), (   25,    24), (   27,   172), (   55,   133),
     (   59,   129), (   -1, -3000), (   -1,  -146), (   -1,  -148),
     (   -1,  -149), (   22,   174), (   60,   175), (   -1, -3000),
     (   -1,  -153), (   -1,  -154), (   -1,  -155), (    3,    54),
     (    4,    10), (   22,   128), (   24,   130), (   25,    24),
     (   55,   133), (   59,   129), (   -1,  -147), (   22,   177),
     (   -1, -3000), (   -1,  -160), (   -1,    -6), (    4,    10),
     (   24,     8), (   -1,   -20), (   -1,   -50), (   -1,   -51),
     (   11,   178), (   -1, -3000), (   -1,   -48), (   -1,   -49),
     (   38,   179), (   39,   180), (   40,   181), (   -1,   -77),
     (   38,   182), (   39,   183), (   40,   184), (   -1,   -81),
     (   38,   185), (   39,   186), (   40,   187), (   -1,   -85),
     (   35,   188), (   37,   189), (   -1, -3000), (   36,   191),
     (   -1,   -73), (   12,   143), (   34,   148), (   -1, -3000),
     (   36,   193), (   -1,   -90), (   -1,   -60), (   -1,   -61),
     (   -1,   -62), (   -1,   -64), (   -1,   -65), (   -1,   -66),
     (   -1,   -55), (   -1,   -92), (   -1,   -93), (   -1,   -96),
     (   -1,   -98), (   -1,  -100), (   -1,  -102), (   -1,  -104),
     (   -1,  -106), (   -1,  -108), (   -1,  -110), (   -1,  -112),
     (   34,   203), (   -1, -3000), (   -1,   -44), (   26,   204),
     (   -1, -3000), (   -1,    -9), (   11,   205), (   -1, -3000),
     (   -1,  -145), (   -1,  -150), (   -1,  -152), (    3,    54),
     (    4,    10), (   22,   128), (   24,   130), (   25,    24),
     (   55,   133), (   56,   207), (   59,   129), (   -1, -3000),
     (   -1,  -158), (   -1,   -47), (   -1,   -74), (   -1,   -75),
     (   -1,   -76), (   -1,   -78), (   -1,   -79), (   -1,   -80),
     (   -1,   -82), (   -1,   -83), (   -1,   -84), (   -1,   -69),
     (   12,   143), (   34,   148), (   -1, -3000), (   35,   209),
     (   36,   210), (   -1, -3000), (   12,   143), (   34,   148),
     (   -1, -3000), (   35,   212), (   36,   213), (   -1, -3000),
     (   12,   214), (   -1, -3000), (   22,   218), (   52,   215),
     (   53,   216), (   54,   217), (   -1, -3000), (   22,   218),
     (   52,   215), (   53,   216), (   54,   217), (   -1, -3000),
     (   22,   218), (   52,   215), (   53,   216), (   54,   217),
     (   -1, -3000), (   22,   218), (   52,   215), (   53,   216),
     (   54,   217), (   -1, -3000), (   22,   218), (   52,   215),
     (   53,   216), (   54,   217), (   -1, -3000), (   22,   218),
     (   52,   215), (   53,   216), (   54,   217), (   -1, -3000),
     (   22,   218), (   52,   215), (   53,   216), (   54,   217),
     (   -1, -3000), (   22,   218), (   52,   215), (   53,   216),
     (   54,   217), (   -1, -3000), (   34,   227), (   -1, -3000),
     (   12,   229), (   43,   230), (   44,   231), (   45,   232),
     (   46,   233), (   47,   234), (   48,   235), (   49,   236),
     (   50,   237), (   51,   238), (   -1, -3000), (   22,   239),
     (   -1, -3000), (   -1,  -143), (   60,   240), (   -1, -3000),
     (   -1,  -156), (   -1,   -72), (   -1,   -68), (   12,   143),
     (   34,   148), (   -1, -3000), (   -1,   -71), (   39,   242),
     (   -1,   -87), (   12,   243), (   -1, -3000), (   -1,   -89),
     (   -1,  -136), (   -1,  -137), (   22,   244), (   -1, -3000),
     (   -1,  -139), (   -1,   -97), (   -1,   -99), (   -1,  -101),
     (   -1,  -103), (   -1,  -105), (   -1,  -107), (   -1,  -109),
     (   -1,  -111), (   12,   229), (   43,   230), (   44,   231),
     (   45,   232), (   46,   233), (   47,   234), (   48,   235),
     (   49,   236), (   50,   237), (   51,   238), (   -1, -3000),
     (   35,   246), (   36,   247), (   -1, -3000), (   -1,  -126),
     (   -1,  -127), (   -1,  -128), (   -1,  -129), (   -1,  -130),
     (   -1,  -131), (   -1,  -132), (   -1,  -133), (   -1,  -134),
     (   -1,  -135), (    5,   248), (   -1, -3000), (   -1,  -151),
     (   -1,   -70), (   -1,   -86), (   -1,   -88), (   -1,  -138),
     (   35,   249), (   36,   247), (   -1, -3000), (   22,   218),
     (   52,   215), (   53,   216), (   54,   217), (   -1, -3000),
     (   12,   251), (   43,   252), (   44,   253), (   45,   254),
     (   46,   255), (   47,   256), (   48,   257), (   49,   258),
     (   50,   259), (   51,   260), (   -1, -3000), (   -1,    -8),
     (   22,   218), (   52,   215), (   53,   216), (   54,   217),
     (   -1, -3000), (   -1,  -115), (   -1,  -116), (   -1,  -117),
     (   -1,  -118), (   -1,  -119), (   -1,  -120), (   -1,  -121),
     (   -1,  -122), (   -1,  -123), (   -1,  -124), (   -1,  -125),
     (   -1,  -113));

   YY_Shift_Reduce_Offset : constant array (0 .. 261) of Integer :=
    (    0,    1,    5,    7,   10,   11,   13,   17,
        18,   19,   20,   22,   23,   24,   25,   27,
        30,   32,   33,   34,   36,   38,   40,   41,
        43,   44,   47,   50,   51,   53,   55,   65,
        67,   69,   72,   74,   76,   78,   79,   89,
       100,  101,  102,  103,  104,  105,  106,  107,
       108,  118,  128,  131,  133,  135,  138,  141,
       142,  146,  147,  148,  150,  152,  153,  163,
       165,  166,  167,  169,  180,  184,  186,  187,
       188,  190,  192,  194,  196,  199,  200,  201,
       202,  204,  205,  207,  208,  209,  210,  212,
       214,  217,  221,  225,  227,  229,  232,  234,
       236,  239,  247,  249,  251,  253,  256,  259,
       260,  261,  262,  264,  266,  268,  269,  270,
       271,  272,  276,  280,  284,  286,  289,  290,
       300,  301,  302,  304,  306,  308,  317,  318,
       319,  320,  323,  324,  325,  326,  334,  336,
       337,  338,  341,  342,  343,  345,  346,  347,
       351,  355,  359,  362,  364,  367,  369,  370,
       371,  372,  373,  374,  375,  376,  377,  378,
       379,  380,  381,  382,  383,  384,  385,  386,
       387,  389,  390,  392,  393,  395,  396,  397,
       398,  407,  408,  409,  410,  411,  412,  413,
       414,  415,  416,  417,  418,  419,  422,  425,
       428,  431,  433,  438,  443,  448,  453,  458,
       463,  468,  473,  475,  486,  488,  489,  491,
       492,  493,  494,  497,  498,  500,  502,  503,
       504,  505,  507,  508,  509,  510,  511,  512,
       513,  514,  515,  516,  527,  530,  531,  532,
       533,  534,  535,  536,  537,  538,  539,  540,
       542,  543,  544,  545,  546,  547,  550,  555,
       566,  567,  572,  573,  574,  575,  576,  577,
       578,  579,  580,  581,  582,  583);

end XML.SAX.Simple_Readers.Parser.Tables;
